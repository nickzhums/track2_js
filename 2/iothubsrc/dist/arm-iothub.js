/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */ 
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/core-http')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/core-http'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmIothub = {}),global.coreHttp));
}(this, (function (exports,coreHttp) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    if (typeof Symbol === undefined || !Symbol.asyncIterator) {
        Symbol.asyncIterator = Symbol.for("Symbol.asyncIterator");
    }

    // Copyright (c) Microsoft Corporation.

    var OperationListResult = {
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    readOnly: true,
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorDetails = {
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    serializedName: "code",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                httpStatusCode: {
                    serializedName: "httpStatusCode",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubProperties = {
        type: {
            name: "Composite",
            className: "IotHubProperties",
            modelProperties: {
                authorizationPolicies: {
                    serializedName: "authorizationPolicies",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessSignatureAuthorizationRule"
                            }
                        }
                    }
                },
                publicNetworkAccess: {
                    serializedName: "publicNetworkAccess",
                    type: {
                        name: "String"
                    }
                },
                ipFilterRules: {
                    serializedName: "ipFilterRules",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IpFilterRule"
                            }
                        }
                    }
                },
                networkRuleSets: {
                    serializedName: "networkRuleSets",
                    type: {
                        name: "Composite",
                        className: "NetworkRuleSetProperties"
                    }
                },
                minTlsVersion: {
                    serializedName: "minTlsVersion",
                    type: {
                        name: "String"
                    }
                },
                privateEndpointConnections: {
                    serializedName: "privateEndpointConnections",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrivateEndpointConnection"
                            }
                        }
                    }
                },
                provisioningState: {
                    serializedName: "provisioningState",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                hostName: {
                    serializedName: "hostName",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                eventHubEndpoints: {
                    serializedName: "eventHubEndpoints",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: { name: "Composite", className: "EventHubProperties" }
                        }
                    }
                },
                routing: {
                    serializedName: "routing",
                    type: {
                        name: "Composite",
                        className: "RoutingProperties"
                    }
                },
                storageEndpoints: {
                    serializedName: "storageEndpoints",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: { name: "Composite", className: "StorageEndpointProperties" }
                        }
                    }
                },
                messagingEndpoints: {
                    serializedName: "messagingEndpoints",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Composite",
                                className: "MessagingEndpointProperties"
                            }
                        }
                    }
                },
                enableFileUploadNotifications: {
                    serializedName: "enableFileUploadNotifications",
                    type: {
                        name: "Boolean"
                    }
                },
                cloudToDevice: {
                    serializedName: "cloudToDevice",
                    type: {
                        name: "Composite",
                        className: "CloudToDeviceProperties"
                    }
                },
                comments: {
                    serializedName: "comments",
                    type: {
                        name: "String"
                    }
                },
                deviceStreams: {
                    serializedName: "deviceStreams",
                    type: {
                        name: "Composite",
                        className: "IotHubPropertiesDeviceStreams"
                    }
                },
                features: {
                    serializedName: "features",
                    type: {
                        name: "String"
                    }
                },
                encryption: {
                    serializedName: "encryption",
                    type: {
                        name: "Composite",
                        className: "EncryptionPropertiesDescription"
                    }
                },
                locations: {
                    serializedName: "locations",
                    readOnly: true,
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubLocationDescription"
                            }
                        }
                    }
                }
            }
        }
    };
    var SharedAccessSignatureAuthorizationRule = {
        type: {
            name: "Composite",
            className: "SharedAccessSignatureAuthorizationRule",
            modelProperties: {
                keyName: {
                    serializedName: "keyName",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                primaryKey: {
                    serializedName: "primaryKey",
                    type: {
                        name: "String"
                    }
                },
                secondaryKey: {
                    serializedName: "secondaryKey",
                    type: {
                        name: "String"
                    }
                },
                rights: {
                    serializedName: "rights",
                    required: true,
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "RegistryRead",
                            "RegistryWrite",
                            "ServiceConnect",
                            "DeviceConnect",
                            "RegistryRead, RegistryWrite",
                            "RegistryRead, ServiceConnect",
                            "RegistryRead, DeviceConnect",
                            "RegistryWrite, ServiceConnect",
                            "RegistryWrite, DeviceConnect",
                            "ServiceConnect, DeviceConnect",
                            "RegistryRead, RegistryWrite, ServiceConnect",
                            "RegistryRead, RegistryWrite, DeviceConnect",
                            "RegistryRead, ServiceConnect, DeviceConnect",
                            "RegistryWrite, ServiceConnect, DeviceConnect",
                            "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect"
                        ]
                    }
                }
            }
        }
    };
    var IpFilterRule = {
        type: {
            name: "Composite",
            className: "IpFilterRule",
            modelProperties: {
                filterName: {
                    serializedName: "filterName",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                action: {
                    serializedName: "action",
                    required: true,
                    type: {
                        name: "Enum",
                        allowedValues: ["Accept", "Reject"]
                    }
                },
                ipMask: {
                    serializedName: "ipMask",
                    required: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var NetworkRuleSetProperties = {
        type: {
            name: "Composite",
            className: "NetworkRuleSetProperties",
            modelProperties: {
                defaultAction: {
                    defaultValue: "Deny",
                    serializedName: "defaultAction",
                    type: {
                        name: "String"
                    }
                },
                applyToBuiltInEventHubEndpoint: {
                    serializedName: "applyToBuiltInEventHubEndpoint",
                    required: true,
                    type: {
                        name: "Boolean"
                    }
                },
                ipRules: {
                    serializedName: "ipRules",
                    required: true,
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "NetworkRuleSetIpRule"
                            }
                        }
                    }
                }
            }
        }
    };
    var NetworkRuleSetIpRule = {
        type: {
            name: "Composite",
            className: "NetworkRuleSetIpRule",
            modelProperties: {
                filterName: {
                    serializedName: "filterName",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                action: {
                    defaultValue: "Allow",
                    serializedName: "action",
                    type: {
                        name: "String"
                    }
                },
                ipMask: {
                    serializedName: "ipMask",
                    required: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnection = {
        type: {
            name: "Composite",
            className: "PrivateEndpointConnection",
            modelProperties: {
                id: {
                    serializedName: "id",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                name: {
                    constraints: {
                        Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
                    },
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "PrivateEndpointConnectionProperties"
                    }
                }
            }
        }
    };
    var PrivateEndpointConnectionProperties = {
        type: {
            name: "Composite",
            className: "PrivateEndpointConnectionProperties",
            modelProperties: {
                privateEndpoint: {
                    serializedName: "privateEndpoint",
                    type: {
                        name: "Composite",
                        className: "PrivateEndpoint"
                    }
                },
                privateLinkServiceConnectionState: {
                    serializedName: "privateLinkServiceConnectionState",
                    type: {
                        name: "Composite",
                        className: "PrivateLinkServiceConnectionState"
                    }
                }
            }
        }
    };
    var PrivateEndpoint = {
        type: {
            name: "Composite",
            className: "PrivateEndpoint",
            modelProperties: {
                id: {
                    serializedName: "id",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateLinkServiceConnectionState = {
        type: {
            name: "Composite",
            className: "PrivateLinkServiceConnectionState",
            modelProperties: {
                status: {
                    serializedName: "status",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                actionsRequired: {
                    serializedName: "actionsRequired",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubProperties = {
        type: {
            name: "Composite",
            className: "EventHubProperties",
            modelProperties: {
                retentionTimeInDays: {
                    serializedName: "retentionTimeInDays",
                    type: {
                        name: "Number"
                    }
                },
                partitionCount: {
                    serializedName: "partitionCount",
                    type: {
                        name: "Number"
                    }
                },
                partitionIds: {
                    serializedName: "partitionIds",
                    readOnly: true,
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                path: {
                    serializedName: "path",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    serializedName: "endpoint",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingProperties = {
        type: {
            name: "Composite",
            className: "RoutingProperties",
            modelProperties: {
                endpoints: {
                    serializedName: "endpoints",
                    type: {
                        name: "Composite",
                        className: "RoutingEndpoints"
                    }
                },
                routes: {
                    serializedName: "routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteProperties"
                            }
                        }
                    }
                },
                fallbackRoute: {
                    serializedName: "fallbackRoute",
                    type: {
                        name: "Composite",
                        className: "FallbackRouteProperties"
                    }
                },
                enrichments: {
                    serializedName: "enrichments",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnrichmentProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoutingEndpoints = {
        type: {
            name: "Composite",
            className: "RoutingEndpoints",
            modelProperties: {
                serviceBusQueues: {
                    serializedName: "serviceBusQueues",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingServiceBusQueueEndpointProperties"
                            }
                        }
                    }
                },
                serviceBusTopics: {
                    serializedName: "serviceBusTopics",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingServiceBusTopicEndpointProperties"
                            }
                        }
                    }
                },
                eventHubs: {
                    serializedName: "eventHubs",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingEventHubProperties"
                            }
                        }
                    }
                },
                storageContainers: {
                    serializedName: "storageContainers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RoutingStorageContainerProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var RoutingServiceBusQueueEndpointProperties = {
        type: {
            name: "Composite",
            className: "RoutingServiceBusQueueEndpointProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                endpointUri: {
                    serializedName: "endpointUri",
                    type: {
                        name: "String"
                    }
                },
                entityPath: {
                    serializedName: "entityPath",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                },
                name: {
                    constraints: {
                        Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                    },
                    serializedName: "name",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ManagedIdentity = {
        type: {
            name: "Composite",
            className: "ManagedIdentity",
            modelProperties: {
                userAssignedIdentity: {
                    serializedName: "userAssignedIdentity",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingServiceBusTopicEndpointProperties = {
        type: {
            name: "Composite",
            className: "RoutingServiceBusTopicEndpointProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                endpointUri: {
                    serializedName: "endpointUri",
                    type: {
                        name: "String"
                    }
                },
                entityPath: {
                    serializedName: "entityPath",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                },
                name: {
                    constraints: {
                        Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                    },
                    serializedName: "name",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingEventHubProperties = {
        type: {
            name: "Composite",
            className: "RoutingEventHubProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                endpointUri: {
                    serializedName: "endpointUri",
                    type: {
                        name: "String"
                    }
                },
                entityPath: {
                    serializedName: "entityPath",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                },
                name: {
                    constraints: {
                        Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                    },
                    serializedName: "name",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RoutingStorageContainerProperties = {
        type: {
            name: "Composite",
            className: "RoutingStorageContainerProperties",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                connectionString: {
                    serializedName: "connectionString",
                    type: {
                        name: "String"
                    }
                },
                endpointUri: {
                    serializedName: "endpointUri",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                },
                name: {
                    constraints: {
                        Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                    },
                    serializedName: "name",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                subscriptionId: {
                    serializedName: "subscriptionId",
                    type: {
                        name: "String"
                    }
                },
                resourceGroup: {
                    serializedName: "resourceGroup",
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    serializedName: "containerName",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                fileNameFormat: {
                    serializedName: "fileNameFormat",
                    type: {
                        name: "String"
                    }
                },
                batchFrequencyInSeconds: {
                    constraints: {
                        InclusiveMaximum: 720,
                        InclusiveMinimum: 60
                    },
                    serializedName: "batchFrequencyInSeconds",
                    type: {
                        name: "Number"
                    }
                },
                maxChunkSizeInBytes: {
                    constraints: {
                        InclusiveMaximum: 524288000,
                        InclusiveMinimum: 10485760
                    },
                    serializedName: "maxChunkSizeInBytes",
                    type: {
                        name: "Number"
                    }
                },
                encoding: {
                    serializedName: "encoding",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RouteProperties = {
        type: {
            name: "Composite",
            className: "RouteProperties",
            modelProperties: {
                name: {
                    constraints: {
                        Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
                    },
                    serializedName: "name",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                condition: {
                    serializedName: "condition",
                    type: {
                        name: "String"
                    }
                },
                endpointNames: {
                    constraints: {
                        MinItems: 1,
                        MaxItems: 1
                    },
                    serializedName: "endpointNames",
                    required: true,
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isEnabled: {
                    serializedName: "isEnabled",
                    required: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FallbackRouteProperties = {
        type: {
            name: "Composite",
            className: "FallbackRouteProperties",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                source: {
                    serializedName: "source",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                condition: {
                    serializedName: "condition",
                    type: {
                        name: "String"
                    }
                },
                endpointNames: {
                    constraints: {
                        MinItems: 1,
                        MaxItems: 1
                    },
                    serializedName: "endpointNames",
                    required: true,
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                isEnabled: {
                    serializedName: "isEnabled",
                    required: true,
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EnrichmentProperties = {
        type: {
            name: "Composite",
            className: "EnrichmentProperties",
            modelProperties: {
                key: {
                    serializedName: "key",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                endpointNames: {
                    constraints: {
                        MinItems: 1
                    },
                    serializedName: "endpointNames",
                    required: true,
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var StorageEndpointProperties = {
        type: {
            name: "Composite",
            className: "StorageEndpointProperties",
            modelProperties: {
                sasTtlAsIso8601: {
                    serializedName: "sasTtlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                connectionString: {
                    serializedName: "connectionString",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                containerName: {
                    serializedName: "containerName",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                }
            }
        }
    };
    var MessagingEndpointProperties = {
        type: {
            name: "Composite",
            className: "MessagingEndpointProperties",
            modelProperties: {
                lockDurationAsIso8601: {
                    serializedName: "lockDurationAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                ttlAsIso8601: {
                    serializedName: "ttlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                maxDeliveryCount: {
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    serializedName: "maxDeliveryCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CloudToDeviceProperties = {
        type: {
            name: "Composite",
            className: "CloudToDeviceProperties",
            modelProperties: {
                maxDeliveryCount: {
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    serializedName: "maxDeliveryCount",
                    type: {
                        name: "Number"
                    }
                },
                defaultTtlAsIso8601: {
                    serializedName: "defaultTtlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                feedback: {
                    serializedName: "feedback",
                    type: {
                        name: "Composite",
                        className: "FeedbackProperties"
                    }
                }
            }
        }
    };
    var FeedbackProperties = {
        type: {
            name: "Composite",
            className: "FeedbackProperties",
            modelProperties: {
                lockDurationAsIso8601: {
                    serializedName: "lockDurationAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                ttlAsIso8601: {
                    serializedName: "ttlAsIso8601",
                    type: {
                        name: "TimeSpan"
                    }
                },
                maxDeliveryCount: {
                    constraints: {
                        InclusiveMaximum: 100,
                        InclusiveMinimum: 1
                    },
                    serializedName: "maxDeliveryCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IotHubPropertiesDeviceStreams = {
        type: {
            name: "Composite",
            className: "IotHubPropertiesDeviceStreams",
            modelProperties: {
                streamingEndpoints: {
                    serializedName: "streamingEndpoints",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var EncryptionPropertiesDescription = {
        type: {
            name: "Composite",
            className: "EncryptionPropertiesDescription",
            modelProperties: {
                keySource: {
                    serializedName: "keySource",
                    type: {
                        name: "String"
                    }
                },
                keyVaultProperties: {
                    serializedName: "keyVaultProperties",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "KeyVaultKeyProperties"
                            }
                        }
                    }
                }
            }
        }
    };
    var KeyVaultKeyProperties = {
        type: {
            name: "Composite",
            className: "KeyVaultKeyProperties",
            modelProperties: {
                keyIdentifier: {
                    serializedName: "keyIdentifier",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                }
            }
        }
    };
    var IotHubLocationDescription = {
        type: {
            name: "Composite",
            className: "IotHubLocationDescription",
            modelProperties: {
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                role: {
                    serializedName: "role",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubSkuInfo = {
        type: {
            name: "Composite",
            className: "IotHubSkuInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    serializedName: "tier",
                    readOnly: true,
                    type: {
                        name: "Enum",
                        allowedValues: ["Free", "Standard", "Basic"]
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ArmIdentity = {
        type: {
            name: "Composite",
            className: "ArmIdentity",
            modelProperties: {
                principalId: {
                    serializedName: "principalId",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    serializedName: "tenantId",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "SystemAssigned",
                            "UserAssigned",
                            "SystemAssigned,UserAssigned",
                            "None"
                        ]
                    }
                },
                userAssignedIdentities: {
                    serializedName: "userAssignedIdentities",
                    type: {
                        name: "Dictionary",
                        value: { type: { name: "Composite", className: "ArmUserIdentity" } }
                    }
                }
            }
        }
    };
    var ArmUserIdentity = {
        type: {
            name: "Composite",
            className: "ArmUserIdentity",
            modelProperties: {
                principalId: {
                    serializedName: "principalId",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                clientId: {
                    serializedName: "clientId",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    serializedName: "id",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                name: {
                    constraints: {
                        Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
                    },
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: { type: { name: "String" } }
                    }
                }
            }
        }
    };
    var TagsResource = {
        type: {
            name: "Composite",
            className: "TagsResource",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: { type: { name: "String" } }
                    }
                }
            }
        }
    };
    var IotHubDescriptionListResult = {
        type: {
            name: "Composite",
            className: "IotHubDescriptionListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RegistryStatistics = {
        type: {
            name: "Composite",
            className: "RegistryStatistics",
            modelProperties: {
                totalDeviceCount: {
                    serializedName: "totalDeviceCount",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                },
                enabledDeviceCount: {
                    serializedName: "enabledDeviceCount",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                },
                disabledDeviceCount: {
                    serializedName: "disabledDeviceCount",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IotHubSkuDescriptionListResult = {
        type: {
            name: "Composite",
            className: "IotHubSkuDescriptionListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubSkuDescription"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubSkuDescription = {
        type: {
            name: "Composite",
            className: "IotHubSkuDescription",
            modelProperties: {
                resourceType: {
                    serializedName: "resourceType",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "IotHubSkuInfo"
                    }
                },
                capacity: {
                    serializedName: "capacity",
                    type: {
                        name: "Composite",
                        className: "IotHubCapacity"
                    }
                }
            }
        }
    };
    var IotHubCapacity = {
        type: {
            name: "Composite",
            className: "IotHubCapacity",
            modelProperties: {
                minimum: {
                    constraints: {
                        InclusiveMaximum: 1,
                        InclusiveMinimum: 1
                    },
                    serializedName: "minimum",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                },
                maximum: {
                    serializedName: "maximum",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                },
                default: {
                    serializedName: "default",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                },
                scaleType: {
                    serializedName: "scaleType",
                    readOnly: true,
                    type: {
                        name: "Enum",
                        allowedValues: ["Automatic", "Manual", "None"]
                    }
                }
            }
        }
    };
    var EventHubConsumerGroupsListResult = {
        type: {
            name: "Composite",
            className: "EventHubConsumerGroupsListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EventHubConsumerGroupInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubConsumerGroupInfo = {
        type: {
            name: "Composite",
            className: "EventHubConsumerGroupInfo",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: { type: { name: "String" } }
                    }
                },
                id: {
                    serializedName: "id",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EventHubConsumerGroupBodyDescription = {
        type: {
            name: "Composite",
            className: "EventHubConsumerGroupBodyDescription",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "EventHubConsumerGroupName"
                    }
                }
            }
        }
    };
    var EventHubConsumerGroupName = {
        type: {
            name: "Composite",
            className: "EventHubConsumerGroupName",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobResponseListResult = {
        type: {
            name: "Composite",
            className: "JobResponseListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "JobResponse"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var JobResponse = {
        type: {
            name: "Composite",
            className: "JobResponse",
            modelProperties: {
                jobId: {
                    serializedName: "jobId",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                startTimeUtc: {
                    serializedName: "startTimeUtc",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                endTimeUtc: {
                    serializedName: "endTimeUtc",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                type: {
                    serializedName: "type",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                status: {
                    serializedName: "status",
                    readOnly: true,
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "unknown",
                            "enqueued",
                            "running",
                            "completed",
                            "failed",
                            "cancelled"
                        ]
                    }
                },
                failureReason: {
                    serializedName: "failureReason",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    serializedName: "statusMessage",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                parentJobId: {
                    serializedName: "parentJobId",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubQuotaMetricInfoListResult = {
        type: {
            name: "Composite",
            className: "IotHubQuotaMetricInfoListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "IotHubQuotaMetricInfo"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubQuotaMetricInfo = {
        type: {
            name: "Composite",
            className: "IotHubQuotaMetricInfo",
            modelProperties: {
                name: {
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                },
                maxValue: {
                    serializedName: "maxValue",
                    readOnly: true,
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var EndpointHealthDataListResult = {
        type: {
            name: "Composite",
            className: "EndpointHealthDataListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EndpointHealthData"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EndpointHealthData = {
        type: {
            name: "Composite",
            className: "EndpointHealthData",
            modelProperties: {
                endpointId: {
                    serializedName: "endpointId",
                    type: {
                        name: "String"
                    }
                },
                healthStatus: {
                    serializedName: "healthStatus",
                    type: {
                        name: "String"
                    }
                },
                lastKnownError: {
                    serializedName: "lastKnownError",
                    type: {
                        name: "String"
                    }
                },
                lastKnownErrorTime: {
                    serializedName: "lastKnownErrorTime",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                lastSuccessfulSendAttemptTime: {
                    serializedName: "lastSuccessfulSendAttemptTime",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                lastSendAttemptTime: {
                    serializedName: "lastSendAttemptTime",
                    type: {
                        name: "DateTimeRfc1123"
                    }
                }
            }
        }
    };
    var OperationInputs = {
        type: {
            name: "Composite",
            className: "OperationInputs",
            modelProperties: {
                name: {
                    serializedName: "name",
                    required: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubNameAvailabilityInfo = {
        type: {
            name: "Composite",
            className: "IotHubNameAvailabilityInfo",
            modelProperties: {
                nameAvailable: {
                    serializedName: "nameAvailable",
                    readOnly: true,
                    type: {
                        name: "Boolean"
                    }
                },
                reason: {
                    serializedName: "reason",
                    readOnly: true,
                    type: {
                        name: "Enum",
                        allowedValues: ["Invalid", "AlreadyExists"]
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserSubscriptionQuotaListResult = {
        type: {
            name: "Composite",
            className: "UserSubscriptionQuotaListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "UserSubscriptionQuota"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var UserSubscriptionQuota = {
        type: {
            name: "Composite",
            className: "UserSubscriptionQuota",
            modelProperties: {
                id: {
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                unit: {
                    serializedName: "unit",
                    type: {
                        name: "String"
                    }
                },
                currentValue: {
                    serializedName: "currentValue",
                    type: {
                        name: "Number"
                    }
                },
                limit: {
                    serializedName: "limit",
                    type: {
                        name: "Number"
                    }
                },
                name: {
                    serializedName: "name",
                    type: {
                        name: "Composite",
                        className: "Name"
                    }
                }
            }
        }
    };
    var Name = {
        type: {
            name: "Composite",
            className: "Name",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                },
                localizedValue: {
                    serializedName: "localizedValue",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TestAllRoutesInput = {
        type: {
            name: "Composite",
            className: "TestAllRoutesInput",
            modelProperties: {
                routingSource: {
                    serializedName: "routingSource",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "Composite",
                        className: "RoutingMessage"
                    }
                },
                twin: {
                    serializedName: "twin",
                    type: {
                        name: "Composite",
                        className: "RoutingTwin"
                    }
                }
            }
        }
    };
    var RoutingMessage = {
        type: {
            name: "Composite",
            className: "RoutingMessage",
            modelProperties: {
                body: {
                    serializedName: "body",
                    type: {
                        name: "String"
                    }
                },
                appProperties: {
                    serializedName: "appProperties",
                    type: {
                        name: "Dictionary",
                        value: { type: { name: "String" } }
                    }
                },
                systemProperties: {
                    serializedName: "systemProperties",
                    type: {
                        name: "Dictionary",
                        value: { type: { name: "String" } }
                    }
                }
            }
        }
    };
    var RoutingTwin = {
        type: {
            name: "Composite",
            className: "RoutingTwin",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "any"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RoutingTwinProperties"
                    }
                }
            }
        }
    };
    var RoutingTwinProperties = {
        type: {
            name: "Composite",
            className: "RoutingTwinProperties",
            modelProperties: {
                desired: {
                    serializedName: "desired",
                    type: {
                        name: "any"
                    }
                },
                reported: {
                    serializedName: "reported",
                    type: {
                        name: "any"
                    }
                }
            }
        }
    };
    var TestAllRoutesResult = {
        type: {
            name: "Composite",
            className: "TestAllRoutesResult",
            modelProperties: {
                routes: {
                    serializedName: "routes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "MatchedRoute"
                            }
                        }
                    }
                }
            }
        }
    };
    var MatchedRoute = {
        type: {
            name: "Composite",
            className: "MatchedRoute",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "RouteProperties"
                    }
                }
            }
        }
    };
    var TestRouteInput = {
        type: {
            name: "Composite",
            className: "TestRouteInput",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "Composite",
                        className: "RoutingMessage"
                    }
                },
                route: {
                    serializedName: "route",
                    type: {
                        name: "Composite",
                        className: "RouteProperties"
                    }
                },
                twin: {
                    serializedName: "twin",
                    type: {
                        name: "Composite",
                        className: "RoutingTwin"
                    }
                }
            }
        }
    };
    var TestRouteResult = {
        type: {
            name: "Composite",
            className: "TestRouteResult",
            modelProperties: {
                result: {
                    serializedName: "result",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Composite",
                        className: "TestRouteResultDetails"
                    }
                }
            }
        }
    };
    var TestRouteResultDetails = {
        type: {
            name: "Composite",
            className: "TestRouteResultDetails",
            modelProperties: {
                compilationErrors: {
                    serializedName: "compilationErrors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RouteCompilationError"
                            }
                        }
                    }
                }
            }
        }
    };
    var RouteCompilationError = {
        type: {
            name: "Composite",
            className: "RouteCompilationError",
            modelProperties: {
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                severity: {
                    serializedName: "severity",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "Composite",
                        className: "RouteErrorRange"
                    }
                }
            }
        }
    };
    var RouteErrorRange = {
        type: {
            name: "Composite",
            className: "RouteErrorRange",
            modelProperties: {
                start: {
                    serializedName: "start",
                    type: {
                        name: "Composite",
                        className: "RouteErrorPosition"
                    }
                },
                end: {
                    serializedName: "end",
                    type: {
                        name: "Composite",
                        className: "RouteErrorPosition"
                    }
                }
            }
        }
    };
    var RouteErrorPosition = {
        type: {
            name: "Composite",
            className: "RouteErrorPosition",
            modelProperties: {
                line: {
                    serializedName: "line",
                    type: {
                        name: "Number"
                    }
                },
                column: {
                    serializedName: "column",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SharedAccessSignatureAuthorizationRuleListResult = {
        type: {
            name: "Composite",
            className: "SharedAccessSignatureAuthorizationRuleListResult",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SharedAccessSignatureAuthorizationRule"
                            }
                        }
                    }
                },
                nextLink: {
                    serializedName: "nextLink",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ExportDevicesRequest = {
        type: {
            name: "Composite",
            className: "ExportDevicesRequest",
            modelProperties: {
                exportBlobContainerUri: {
                    serializedName: "exportBlobContainerUri",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                excludeKeys: {
                    serializedName: "excludeKeys",
                    required: true,
                    type: {
                        name: "Boolean"
                    }
                },
                exportBlobName: {
                    serializedName: "exportBlobName",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                }
            }
        }
    };
    var ImportDevicesRequest = {
        type: {
            name: "Composite",
            className: "ImportDevicesRequest",
            modelProperties: {
                inputBlobContainerUri: {
                    serializedName: "inputBlobContainerUri",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                outputBlobContainerUri: {
                    serializedName: "outputBlobContainerUri",
                    required: true,
                    type: {
                        name: "String"
                    }
                },
                inputBlobName: {
                    serializedName: "inputBlobName",
                    type: {
                        name: "String"
                    }
                },
                outputBlobName: {
                    serializedName: "outputBlobName",
                    type: {
                        name: "String"
                    }
                },
                authenticationType: {
                    serializedName: "authenticationType",
                    type: {
                        name: "String"
                    }
                },
                identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ManagedIdentity"
                    }
                }
            }
        }
    };
    var CertificateListDescription = {
        type: {
            name: "Composite",
            className: "CertificateListDescription",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CertificateDescription"
                            }
                        }
                    }
                }
            }
        }
    };
    var CertificateDescription = {
        type: {
            name: "Composite",
            className: "CertificateDescription",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CertificateProperties"
                    }
                },
                id: {
                    serializedName: "id",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateProperties = {
        type: {
            name: "Composite",
            className: "CertificateProperties",
            modelProperties: {
                subject: {
                    serializedName: "subject",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                expiry: {
                    serializedName: "expiry",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                isVerified: {
                    serializedName: "isVerified",
                    readOnly: true,
                    type: {
                        name: "Boolean"
                    }
                },
                created: {
                    serializedName: "created",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                updated: {
                    serializedName: "updated",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateWithNonceDescription = {
        type: {
            name: "Composite",
            className: "CertificateWithNonceDescription",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "CertificatePropertiesWithNonce"
                    }
                },
                id: {
                    serializedName: "id",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                name: {
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificatePropertiesWithNonce = {
        type: {
            name: "Composite",
            className: "CertificatePropertiesWithNonce",
            modelProperties: {
                subject: {
                    serializedName: "subject",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                expiry: {
                    serializedName: "expiry",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                thumbprint: {
                    serializedName: "thumbprint",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                isVerified: {
                    serializedName: "isVerified",
                    readOnly: true,
                    type: {
                        name: "Boolean"
                    }
                },
                created: {
                    serializedName: "created",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                updated: {
                    serializedName: "updated",
                    readOnly: true,
                    type: {
                        name: "DateTimeRfc1123"
                    }
                },
                verificationCode: {
                    serializedName: "verificationCode",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                certificate: {
                    serializedName: "certificate",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CertificateVerificationDescription = {
        type: {
            name: "Composite",
            className: "CertificateVerificationDescription",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FailoverInput = {
        type: {
            name: "Composite",
            className: "FailoverInput",
            modelProperties: {
                failoverRegion: {
                    serializedName: "failoverRegion",
                    required: true,
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var PrivateLinkResources = {
        type: {
            name: "Composite",
            className: "PrivateLinkResources",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "GroupIdInformation"
                            }
                        }
                    }
                }
            }
        }
    };
    var GroupIdInformation = {
        type: {
            name: "Composite",
            className: "GroupIdInformation",
            modelProperties: {
                id: {
                    serializedName: "id",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                name: {
                    constraints: {
                        Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
                    },
                    serializedName: "name",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    readOnly: true,
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "GroupIdInformationProperties"
                    }
                }
            }
        }
    };
    var GroupIdInformationProperties = {
        type: {
            name: "Composite",
            className: "GroupIdInformationProperties",
            modelProperties: {
                groupId: {
                    serializedName: "groupId",
                    type: {
                        name: "String"
                    }
                },
                requiredMembers: {
                    serializedName: "requiredMembers",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                requiredZoneNames: {
                    serializedName: "requiredZoneNames",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var CertificateBodyDescription = {
        type: {
            name: "Composite",
            className: "CertificateBodyDescription",
            modelProperties: {
                certificate: {
                    serializedName: "certificate",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var IotHubDescription = {
        type: {
            name: "Composite",
            className: "IotHubDescription",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }, properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "IotHubProperties"
                    }
                }, sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "IotHubSkuInfo"
                    }
                }, identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ArmIdentity"
                    }
                } })
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        OperationListResult: OperationListResult,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        ErrorDetails: ErrorDetails,
        IotHubProperties: IotHubProperties,
        SharedAccessSignatureAuthorizationRule: SharedAccessSignatureAuthorizationRule,
        IpFilterRule: IpFilterRule,
        NetworkRuleSetProperties: NetworkRuleSetProperties,
        NetworkRuleSetIpRule: NetworkRuleSetIpRule,
        PrivateEndpointConnection: PrivateEndpointConnection,
        PrivateEndpointConnectionProperties: PrivateEndpointConnectionProperties,
        PrivateEndpoint: PrivateEndpoint,
        PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
        EventHubProperties: EventHubProperties,
        RoutingProperties: RoutingProperties,
        RoutingEndpoints: RoutingEndpoints,
        RoutingServiceBusQueueEndpointProperties: RoutingServiceBusQueueEndpointProperties,
        ManagedIdentity: ManagedIdentity,
        RoutingServiceBusTopicEndpointProperties: RoutingServiceBusTopicEndpointProperties,
        RoutingEventHubProperties: RoutingEventHubProperties,
        RoutingStorageContainerProperties: RoutingStorageContainerProperties,
        RouteProperties: RouteProperties,
        FallbackRouteProperties: FallbackRouteProperties,
        EnrichmentProperties: EnrichmentProperties,
        StorageEndpointProperties: StorageEndpointProperties,
        MessagingEndpointProperties: MessagingEndpointProperties,
        CloudToDeviceProperties: CloudToDeviceProperties,
        FeedbackProperties: FeedbackProperties,
        IotHubPropertiesDeviceStreams: IotHubPropertiesDeviceStreams,
        EncryptionPropertiesDescription: EncryptionPropertiesDescription,
        KeyVaultKeyProperties: KeyVaultKeyProperties,
        IotHubLocationDescription: IotHubLocationDescription,
        IotHubSkuInfo: IotHubSkuInfo,
        ArmIdentity: ArmIdentity,
        ArmUserIdentity: ArmUserIdentity,
        Resource: Resource,
        TagsResource: TagsResource,
        IotHubDescriptionListResult: IotHubDescriptionListResult,
        RegistryStatistics: RegistryStatistics,
        IotHubSkuDescriptionListResult: IotHubSkuDescriptionListResult,
        IotHubSkuDescription: IotHubSkuDescription,
        IotHubCapacity: IotHubCapacity,
        EventHubConsumerGroupsListResult: EventHubConsumerGroupsListResult,
        EventHubConsumerGroupInfo: EventHubConsumerGroupInfo,
        EventHubConsumerGroupBodyDescription: EventHubConsumerGroupBodyDescription,
        EventHubConsumerGroupName: EventHubConsumerGroupName,
        JobResponseListResult: JobResponseListResult,
        JobResponse: JobResponse,
        IotHubQuotaMetricInfoListResult: IotHubQuotaMetricInfoListResult,
        IotHubQuotaMetricInfo: IotHubQuotaMetricInfo,
        EndpointHealthDataListResult: EndpointHealthDataListResult,
        EndpointHealthData: EndpointHealthData,
        OperationInputs: OperationInputs,
        IotHubNameAvailabilityInfo: IotHubNameAvailabilityInfo,
        UserSubscriptionQuotaListResult: UserSubscriptionQuotaListResult,
        UserSubscriptionQuota: UserSubscriptionQuota,
        Name: Name,
        TestAllRoutesInput: TestAllRoutesInput,
        RoutingMessage: RoutingMessage,
        RoutingTwin: RoutingTwin,
        RoutingTwinProperties: RoutingTwinProperties,
        TestAllRoutesResult: TestAllRoutesResult,
        MatchedRoute: MatchedRoute,
        TestRouteInput: TestRouteInput,
        TestRouteResult: TestRouteResult,
        TestRouteResultDetails: TestRouteResultDetails,
        RouteCompilationError: RouteCompilationError,
        RouteErrorRange: RouteErrorRange,
        RouteErrorPosition: RouteErrorPosition,
        SharedAccessSignatureAuthorizationRuleListResult: SharedAccessSignatureAuthorizationRuleListResult,
        ExportDevicesRequest: ExportDevicesRequest,
        ImportDevicesRequest: ImportDevicesRequest,
        CertificateListDescription: CertificateListDescription,
        CertificateDescription: CertificateDescription,
        CertificateProperties: CertificateProperties,
        CertificateWithNonceDescription: CertificateWithNonceDescription,
        CertificatePropertiesWithNonce: CertificatePropertiesWithNonce,
        CertificateVerificationDescription: CertificateVerificationDescription,
        FailoverInput: FailoverInput,
        PrivateLinkResources: PrivateLinkResources,
        GroupIdInformation: GroupIdInformation,
        GroupIdInformationProperties: GroupIdInformationProperties,
        CertificateBodyDescription: CertificateBodyDescription,
        IotHubDescription: IotHubDescription
    });

    var accept = {
        parameterPath: "accept",
        mapper: {
            defaultValue: "application/json",
            isConstant: true,
            serializedName: "Accept",
            type: {
                name: "String"
            }
        }
    };
    var $host = {
        parameterPath: "$host",
        mapper: {
            serializedName: "$host",
            required: true,
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            defaultValue: "2021-03-03-preview",
            isConstant: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var nextLink = {
        parameterPath: "nextLink",
        mapper: {
            serializedName: "nextLink",
            required: true,
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            serializedName: "subscriptionId",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            serializedName: "resourceGroupName",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            serializedName: "resourceName",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var contentType = {
        parameterPath: ["options", "contentType"],
        mapper: {
            defaultValue: "application/json",
            isConstant: true,
            serializedName: "Content-Type",
            type: {
                name: "String"
            }
        }
    };
    var iotHubDescription = {
        parameterPath: "iotHubDescription",
        mapper: IotHubDescription
    };
    var ifMatch = {
        parameterPath: ["options", "ifMatch"],
        mapper: {
            serializedName: "If-Match",
            type: {
                name: "String"
            }
        }
    };
    var iotHubTags = {
        parameterPath: "iotHubTags",
        mapper: TagsResource
    };
    var eventHubEndpointName = {
        parameterPath: "eventHubEndpointName",
        mapper: {
            serializedName: "eventHubEndpointName",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var name = {
        parameterPath: "name",
        mapper: {
            serializedName: "name",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var consumerGroupBody = {
        parameterPath: "consumerGroupBody",
        mapper: EventHubConsumerGroupBodyDescription
    };
    var jobId = {
        parameterPath: "jobId",
        mapper: {
            serializedName: "jobId",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var iotHubName = {
        parameterPath: "iotHubName",
        mapper: {
            serializedName: "iotHubName",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var operationInputs = {
        parameterPath: "operationInputs",
        mapper: OperationInputs
    };
    var input = {
        parameterPath: "input",
        mapper: TestAllRoutesInput
    };
    var input1 = {
        parameterPath: "input",
        mapper: TestRouteInput
    };
    var keyName = {
        parameterPath: "keyName",
        mapper: {
            serializedName: "keyName",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var exportDevicesParameters = {
        parameterPath: "exportDevicesParameters",
        mapper: ExportDevicesRequest
    };
    var importDevicesParameters = {
        parameterPath: "importDevicesParameters",
        mapper: ImportDevicesRequest
    };
    var certificateName = {
        parameterPath: "certificateName",
        mapper: {
            constraints: {
                Pattern: new RegExp("^[A-Za-z0-9-._]{1,64}$")
            },
            serializedName: "certificateName",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var certificateDescription = {
        parameterPath: "certificateDescription",
        mapper: CertificateDescription
    };
    var ifMatch1 = {
        parameterPath: "ifMatch",
        mapper: {
            serializedName: "If-Match",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var certificateVerificationBody = {
        parameterPath: "certificateVerificationBody",
        mapper: CertificateVerificationDescription
    };
    var failoverInput = {
        parameterPath: "failoverInput",
        mapper: FailoverInput
    };
    var groupId = {
        parameterPath: "groupId",
        mapper: {
            serializedName: "groupId",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var privateEndpointConnectionName = {
        parameterPath: "privateEndpointConnectionName",
        mapper: {
            serializedName: "privateEndpointConnectionName",
            required: true,
            type: {
                name: "String"
            }
        }
    };
    var privateEndpointConnection = {
        parameterPath: "privateEndpointConnection",
        mapper: PrivateEndpointConnection
    };

    /// <reference lib="esnext.asynciterable" />
    /** Class representing a Operations. */
    var OperationsImpl = /** @class */ (function () {
        /**
         * Initialize a new instance of the class Operations class.
         * @param client Reference to the service client
         */
        function OperationsImpl(client) {
            this.client = client;
        }
        /**
         * Lists all of the available IoT Hub REST API operations.
         * @param options The options parameters.
         */
        OperationsImpl.prototype.list = function (options) {
            var _a;
            var _this = this;
            var iter = this.listPagingAll(options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.listPagingPage(options);
                },
                _a;
        };
        OperationsImpl.prototype.listPagingPage = function (options) {
            return __asyncGenerator(this, arguments, function listPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._list(options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._listNext(continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        OperationsImpl.prototype.listPagingAll = function (options) {
            return __asyncGenerator(this, arguments, function listPagingAll_1() {
                var _a, _b, page, e_1_1;
                var e_1, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.listPagingPage(options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_1_1 = _d.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_1) throw e_1.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Lists all of the available IoT Hub REST API operations.
         * @param options The options parameters.
         */
        OperationsImpl.prototype._list = function (options) {
            var operationArguments = {
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listOperationSpec);
        };
        /**
         * ListNext
         * @param nextLink The nextLink from the previous successful call to the List method.
         * @param options The options parameters.
         */
        OperationsImpl.prototype._listNext = function (nextLink$$1, options) {
            var operationArguments = {
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listNextOperationSpec);
        };
        return OperationsImpl;
    }());
    // Operation Specifications
    var serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);
    var listOperationSpec = {
        path: "/providers/Microsoft.Devices/operations",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host],
        headerParameters: [accept],
        serializer: serializer
    };
    var listNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, nextLink],
        headerParameters: [accept],
        serializer: serializer
    };

    var terminalStates = ["succeeded", "failed", "canceled", "cancelled"];

    /**
     * We need to selectively deserialize our responses, only deserializing if we
     * are in a final LRO response, not deserializing any polling non-terminal responses
     */
    function shouldDeserializeLRO(finalStateVia) {
        var initialOperationInfo;
        var isInitialRequest = true;
        return function (response) {
            if (response.status < 200 || response.status >= 300) {
                return true;
            }
            if (!initialOperationInfo) {
                initialOperationInfo = getLROData(response);
            }
            else {
                isInitialRequest = false;
            }
            if (initialOperationInfo.azureAsyncOperation ||
                initialOperationInfo.operationLocation) {
                return (!isInitialRequest &&
                    isAsyncOperationFinalResponse(response, initialOperationInfo, finalStateVia));
            }
            if (initialOperationInfo.location) {
                return isLocationFinalResponse(response);
            }
            if (initialOperationInfo.requestMethod === "PUT") {
                return isBodyPollingFinalResponse(response);
            }
            return true;
        };
    }
    function isAsyncOperationFinalResponse(response, initialOperationInfo, finalStateVia) {
        var _a;
        var status = ((_a = response.parsedBody) === null || _a === void 0 ? void 0 : _a.status) || "Succeeded";
        if (!terminalStates.includes(status.toLowerCase())) {
            return false;
        }
        if (initialOperationInfo.requestMethod === "DELETE") {
            return true;
        }
        if (initialOperationInfo.requestMethod === "PUT" &&
            finalStateVia &&
            finalStateVia.toLowerCase() === "azure-asyncoperation") {
            return true;
        }
        if (initialOperationInfo.requestMethod !== "PUT" &&
            !initialOperationInfo.location) {
            return true;
        }
        return false;
    }
    function isLocationFinalResponse(response) {
        return response.status !== 202;
    }
    function isBodyPollingFinalResponse(response) {
        var _a, _b;
        var provisioningState = ((_b = (_a = response.parsedBody) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.provisioningState) || "Succeeded";
        if (terminalStates.includes(provisioningState.toLowerCase())) {
            return true;
        }
        return false;
    }
    function getLROData(result) {
        var statusCode = result.status;
        var _a = result.parsedBody || {}, status = _a.status, properties = _a.properties;
        return {
            statusCode: statusCode,
            azureAsyncOperation: result.headers.get("azure-asyncoperation"),
            operationLocation: result.headers.get("operation-location"),
            location: result.headers.get("location"),
            requestMethod: result.request.method,
            status: status,
            provisioningState: properties === null || properties === void 0 ? void 0 : properties.provisioningState
        };
    }

    var LROSYM = Symbol("LROData");

    /**
     * Creates a polling strategy based on BodyPolling which uses the provisioning state
     * from the result to determine the current operation state
     */
    function createBodyPollingStrategy(initialOperation, sendOperation) {
        var _this = this;
        if (!initialOperation.result._response[LROSYM]) {
            throw new Error("Expected lroData to be defined for BodyPolling strategy");
        }
        var currentOperation = initialOperation;
        return {
            isTerminal: function () {
                var currentResult = currentOperation.result._response[LROSYM];
                if (!currentResult) {
                    throw new Error("Expected lroData to determine terminal status");
                }
                var _a = currentResult.provisioningState, provisioningState = _a === void 0 ? "succeeded" : _a;
                // If provisioning state is missing, default to Success
                return terminalStates.includes(provisioningState.toLowerCase());
            },
            sendFinalRequest: function () {
                // BodyPolling doesn't require a final get so return the lastOperation
                return Promise.resolve(currentOperation);
            },
            poll: function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, requestBody, restSpec, pollingSpec, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = initialOperation.spec, requestBody = _a.requestBody, restSpec = __rest(_a, ["requestBody"]);
                            pollingSpec = __assign(__assign({}, restSpec), { httpMethod: "GET" });
                            // Execute the polling operation
                            _b = initialOperation;
                            return [4 /*yield*/, sendOperation(initialOperation.args, pollingSpec)];
                        case 1:
                            // Execute the polling operation
                            _b.result = _c.sent();
                            return [2 /*return*/, initialOperation];
                    }
                });
            }); }
        };
    }

    function lroPolicy() {
        return {
            create: function (nextPolicy, options) {
                return new LROPolicy(nextPolicy, options);
            }
        };
    }
    var LROPolicy = /** @class */ (function (_super) {
        __extends(LROPolicy, _super);
        function LROPolicy(nextPolicy, options) {
            return _super.call(this, nextPolicy, options) || this;
        }
        LROPolicy.prototype.sendRequest = function (webResource) {
            return __awaiter(this, void 0, void 0, function () {
                var result, _lroData;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._nextPolicy.sendRequest(webResource)];
                        case 1:
                            result = _a.sent();
                            _lroData = getLROData(result);
                            result[LROSYM] = _lroData;
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        return LROPolicy;
    }(coreHttp.BaseRequestPolicy));

    // Copyright (c) Microsoft Corporation.

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    // Copyright (c) Microsoft Corporation.
    /**
     * When a poller is manually stopped through the `stopPolling` method,
     * the poller will be rejected with an instance of the PollerStoppedError.
     */
    var PollerStoppedError = /** @class */ (function (_super) {
        __extends$1(PollerStoppedError, _super);
        function PollerStoppedError(message) {
            var _this = _super.call(this, message) || this;
            _this.name = "PollerStoppedError";
            Object.setPrototypeOf(_this, PollerStoppedError.prototype);
            return _this;
        }
        return PollerStoppedError;
    }(Error));
    /**
     * When a poller is cancelled through the `cancelOperation` method,
     * the poller will be rejected with an instance of the PollerCancelledError.
     */
    var PollerCancelledError = /** @class */ (function (_super) {
        __extends$1(PollerCancelledError, _super);
        function PollerCancelledError(message) {
            var _this = _super.call(this, message) || this;
            _this.name = "PollerCancelledError";
            Object.setPrototypeOf(_this, PollerCancelledError.prototype);
            return _this;
        }
        return PollerCancelledError;
    }(Error));
    /**
     * A class that represents the definition of a program that polls through consecutive requests
     * until it reaches a state of completion.
     *
     * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.
     * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.
     * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.
     *
     * ```ts
     * const poller = new MyPoller();
     *
     * // Polling just once:
     * await poller.poll();
     *
     * // We can try to cancel the request here, by calling:
     * //
     * //     await poller.cancelOperation();
     * //
     *
     * // Getting the final result:
     * const result = await poller.pollUntilDone();
     * ```
     *
     * The Poller is defined by two types, a type representing the state of the poller, which
     * must include a basic set of properties from `PollOperationState<TResult>`,
     * and a return type defined by `TResult`, which can be anything.
     *
     * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having
     * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.
     *
     * ```ts
     * class Client {
     *   public async makePoller: PollerLike<MyOperationState, MyResult> {
     *     const poller = new MyPoller({});
     *     // It might be preferred to return the poller after the first request is made,
     *     // so that some information can be obtained right away.
     *     await poller.poll();
     *     return poller;
     *   }
     * }
     *
     * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();
     * ```
     *
     * A poller can be created through its constructor, then it can be polled until it's completed.
     * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.
     * At any point in time, the intermediate forms of the result type can be requested without delay.
     * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.
     *
     * ```ts
     * const poller = myClient.makePoller();
     * const state: MyOperationState = poller.getOperationState();
     *
     * // The intermediate result can be obtained at any time.
     * const result: MyResult | undefined = poller.getResult();
     *
     * // The final result can only be obtained after the poller finishes.
     * const result: MyResult = await poller.pollUntilDone();
     * ```
     *
     */
    // eslint-disable-next-line no-use-before-define
    var Poller = /** @class */ (function () {
        /**
         * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.
         *
         * When writing an implementation of a Poller, this implementation needs to deal with the initialization
         * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
         * operation has already been defined, at least its basic properties. The code below shows how to approach
         * the definition of the constructor of a new custom poller.
         *
         * ```ts
         * export class MyPoller extends Poller<MyOperationState, string> {
         *   constructor({
         *     // Anything you might need outside of the basics
         *   }) {
         *     let state: MyOperationState = {
         *       privateProperty: private,
         *       publicProperty: public,
         *     };
         *
         *     const operation = {
         *       state,
         *       update,
         *       cancel,
         *       toString
         *     }
         *
         *     // Sending the operation to the parent's constructor.
         *     super(operation);
         *
         *     // You can assign more local properties here.
         *   }
         * }
         * ```
         *
         * Inside of this constructor, a new promise is created. This will be used to
         * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
         * resolve and reject methods are also used internally to control when to resolve
         * or reject anyone waiting for the poller to finish.
         *
         * The constructor of a custom implementation of a poller is where any serialized version of
         * a previous poller's operation should be deserialized into the operation sent to the
         * base constructor. For example:
         *
         * ```ts
         * export class MyPoller extends Poller<MyOperationState, string> {
         *   constructor(
         *     baseOperation: string | undefined
         *   ) {
         *     let state: MyOperationState = {};
         *     if (baseOperation) {
         *       state = {
         *         ...JSON.parse(baseOperation).state,
         *         ...state
         *       };
         *     }
         *     const operation = {
         *       state,
         *       // ...
         *     }
         *     super(operation);
         *   }
         * }
         * ```
         *
         * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.
         */
        function Poller(operation) {
            var _this = this;
            this.stopped = true;
            this.pollProgressCallbacks = [];
            this.operation = operation;
            this.promise = new Promise(function (resolve, reject) {
                _this.resolve = resolve;
                _this.reject = reject;
            });
            // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.
            // The above warning would get thrown if `poller.poll` is called, it returns an error,
            // and pullUntilDone did not have a .catch or await try/catch on it's return value.
            this.promise.catch(function () {
                /* intentionally blank */
            });
        }
        /**
         * @internal
         * Starts a loop that will break only if the poller is done
         * or if the poller is stopped.
         */
        Poller.prototype.startPolling = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.stopped) {
                                this.stopped = false;
                            }
                            _a.label = 1;
                        case 1:
                            if (!(!this.isStopped() && !this.isDone())) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.poll()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.delay()];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 1];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @internal
         * pollOnce does one polling, by calling to the update method of the underlying
         * poll operation to make any relevant change effective.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * @param options - Optional properties passed to the operation's update method.
         */
        Poller.prototype.pollOnce = function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter$1(this, void 0, void 0, function () {
                var _a, e_1;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 3, , 4]);
                            if (!!this.isDone()) return [3 /*break*/, 2];
                            _a = this;
                            return [4 /*yield*/, this.operation.update({
                                    abortSignal: options.abortSignal,
                                    fireProgress: this.fireProgress.bind(this)
                                })];
                        case 1:
                            _a.operation = _b.sent();
                            if (this.isDone() && this.resolve) {
                                // If the poller has finished polling, this means we now have a result.
                                // However, it can be the case that TResult is instantiated to void, so
                                // we are not expecting a result anyway. To assert that we might not
                                // have a result eventually after finishing polling, we cast the result
                                // to TResult.
                                this.resolve(this.operation.state.result);
                            }
                            _b.label = 2;
                        case 2: return [3 /*break*/, 4];
                        case 3:
                            e_1 = _b.sent();
                            this.operation.state.error = e_1;
                            if (this.reject) {
                                this.reject(e_1);
                            }
                            throw e_1;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @internal
         * fireProgress calls the functions passed in via onProgress the method of the poller.
         *
         * It loops over all of the callbacks received from onProgress, and executes them, sending them
         * the current operation state.
         *
         * @param state - The current operation state.
         */
        Poller.prototype.fireProgress = function (state) {
            for (var _i = 0, _a = this.pollProgressCallbacks; _i < _a.length; _i++) {
                var callback = _a[_i];
                callback(state);
            }
        };
        /**
         * @internal
         * Invokes the underlying operation's cancel method, and rejects the
         * pollUntilDone promise.
         */
        Poller.prototype.cancelOnce = function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter$1(this, void 0, void 0, function () {
                var _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.operation.cancel(options)];
                        case 1:
                            _a.operation = _b.sent();
                            if (this.reject) {
                                this.reject(new PollerCancelledError("Poller cancelled"));
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Returns a promise that will resolve once a single polling request finishes.
         * It does this by calling the update method of the Poller's operation.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * @param options - Optional properties passed to the operation's update method.
         */
        Poller.prototype.poll = function (options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            if (!this.pollOncePromise) {
                this.pollOncePromise = this.pollOnce(options);
                var clearPollOncePromise = function () {
                    _this.pollOncePromise = undefined;
                };
                this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);
            }
            return this.pollOncePromise;
        };
        /**
         * Returns a promise that will resolve once the underlying operation is completed.
         */
        Poller.prototype.pollUntilDone = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    if (this.stopped) {
                        this.startPolling().catch(this.reject);
                    }
                    return [2 /*return*/, this.promise];
                });
            });
        };
        /**
         * Invokes the provided callback after each polling is completed,
         * sending the current state of the poller's operation.
         *
         * It returns a method that can be used to stop receiving updates on the given callback function.
         */
        Poller.prototype.onProgress = function (callback) {
            var _this = this;
            this.pollProgressCallbacks.push(callback);
            return function () {
                _this.pollProgressCallbacks = _this.pollProgressCallbacks.filter(function (c) { return c !== callback; });
            };
        };
        /**
         * Returns true if the poller has finished polling.
         */
        Poller.prototype.isDone = function () {
            var state = this.operation.state;
            return Boolean(state.isCompleted || state.isCancelled || state.error);
        };
        /**
         * Stops the poller from continuing to poll.
         */
        Poller.prototype.stopPolling = function () {
            if (!this.stopped) {
                this.stopped = true;
                if (this.reject) {
                    this.reject(new PollerStoppedError("This poller is already stopped"));
                }
            }
        };
        /**
         * Returns true if the poller is stopped.
         */
        Poller.prototype.isStopped = function () {
            return this.stopped;
        };
        /**
         * Attempts to cancel the underlying operation.
         *
         * It only optionally receives an object with an abortSignal property, from \@azure/abort-controller's AbortSignalLike.
         *
         * If it's called again before it finishes, it will throw an error.
         *
         * @param options - Optional properties passed to the operation's update method.
         */
        Poller.prototype.cancelOperation = function (options) {
            if (options === void 0) { options = {}; }
            if (!this.stopped) {
                this.stopped = true;
            }
            if (!this.cancelPromise) {
                this.cancelPromise = this.cancelOnce(options);
            }
            else if (options.abortSignal) {
                throw new Error("A cancel request is currently pending");
            }
            return this.cancelPromise;
        };
        /**
         * Returns the state of the operation.
         *
         * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
         * implementations of the pollers can customize what's shared with the public by writing their own
         * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
         * and a public type representing a safe to share subset of the properties of the internal state.
         * Their definition of getOperationState can then return their public type.
         *
         * Example:
         *
         * ```ts
         * // Let's say we have our poller's operation state defined as:
         * interface MyOperationState extends PollOperationState<ResultType> {
         *   privateProperty?: string;
         *   publicProperty?: string;
         * }
         *
         * // To allow us to have a true separation of public and private state, we have to define another interface:
         * interface PublicState extends PollOperationState<ResultType> {
         *   publicProperty?: string;
         * }
         *
         * // Then, we define our Poller as follows:
         * export class MyPoller extends Poller<MyOperationState, ResultType> {
         *   // ... More content is needed here ...
         *
         *   public getOperationState(): PublicState {
         *     const state: PublicState = this.operation.state;
         *     return {
         *       // Properties from PollOperationState<TResult>
         *       isStarted: state.isStarted,
         *       isCompleted: state.isCompleted,
         *       isCancelled: state.isCancelled,
         *       error: state.error,
         *       result: state.result,
         *
         *       // The only other property needed by PublicState.
         *       publicProperty: state.publicProperty
         *     }
         *   }
         * }
         * ```
         *
         * You can see this in the tests of this repository, go to the file:
         * `../test/utils/testPoller.ts`
         * and look for the getOperationState implementation.
         */
        Poller.prototype.getOperationState = function () {
            return this.operation.state;
        };
        /**
         * Returns the result value of the operation,
         * regardless of the state of the poller.
         * It can return undefined or an incomplete form of the final TResult value
         * depending on the implementation.
         */
        Poller.prototype.getResult = function () {
            var state = this.operation.state;
            return state.result;
        };
        /**
         * Returns a serialized version of the poller's operation
         * by invoking the operation's toString method.
         */
        Poller.prototype.toString = function () {
            return this.operation.toString();
        };
        return Poller;
    }());

    // Copyright (c) Microsoft Corporation.

    /**
     * Creates a copy of the operation from a given State
     */
    function makeOperation(state) {
        return {
            state: __assign({}, state),
            update: update,
            cancel: cancel,
            toString: function () {
                return JSON.stringify(this.state);
            }
        };
    }
    /**
     * General update function for LROPoller, the general process is as follows
     * 1. Check initial operation result to determine the strategy to use
     *  - Strategies: Location, Azure-AsyncOperation, Original Uri
     * 2. Check if the operation result has a terminal state
     *  - Terminal state will be determined by each strategy
     *  2.1 If it is terminal state Check if a final GET request is required, if so
     *      send final GET request and return result from operation. If no final GET
     *      is required, just return the result from operation.
     *      - Determining what to call for final request is responsibility of each strategy
     *  2.2 If it is not terminal state, call the polling operation call it and go to step 1
     *      - Determining what to call for polling is responsibility of each strategy
     *      - Strategies will always use the latest URI for polling if provided otherwise
     *        the last known one
     */
    function update() {
        return __awaiter(this, void 0, void 0, function () {
            var state, _a, sendFinalRequest, poll, isTerminal, currentResponse, currentLroData, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        state = this.state;
                        _a = state.pollingStrategy, sendFinalRequest = _a.sendFinalRequest, poll = _a.poll, isTerminal = _a.isTerminal;
                        currentResponse = state.lastOperation;
                        currentLroData = currentResponse.result._response[LROSYM];
                        if (!currentLroData) {
                            throw new Error("Expected lroData to be defined for updating LRO operation");
                        }
                        if (!isTerminal()) return [3 /*break*/, 2];
                        _b = state;
                        return [4 /*yield*/, sendFinalRequest()];
                    case 1:
                        _b.lastOperation = _d.sent();
                        state.result = state.lastOperation.result;
                        state.isCompleted = true;
                        return [3 /*break*/, 4];
                    case 2:
                        _c = state;
                        return [4 /*yield*/, poll()];
                    case 3:
                        _c.lastOperation = _d.sent();
                        _d.label = 4;
                    case 4: 
                    // Return operation
                    return [2 /*return*/, makeOperation(state)];
                }
            });
        });
    }
    /**
     * Swagger doesn't support defining a cancel operation, we'll just mark
     * the operation state as cancelled
     */
    function cancel() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, makeOperation(__assign(__assign({}, this.state), { isCancelled: true }))];
            });
        });
    }

    function createAzureAsyncOperationStrategy(initialOperation, sendOperationFn, finalStateVia) {
        var _this = this;
        var lroData = initialOperation.result._response[LROSYM];
        if (!lroData) {
            throw new Error("Expected lroData to be defined for Azure-AsyncOperation strategy");
        }
        var currentOperation = initialOperation;
        var lastKnownPollingUrl = lroData.azureAsyncOperation || lroData.operationLocation;
        return {
            isTerminal: function () {
                var currentResult = currentOperation.result._response[LROSYM];
                if (!currentResult) {
                    throw new Error("Expected lroData to determine terminal status");
                }
                if (currentOperation === initialOperation) {
                    // Azure-AsyncOperations don't need to check for terminal state
                    // on originalOperation result, always need to poll
                    return false;
                }
                var _a = currentResult.status, status = _a === void 0 ? "succeeded" : _a;
                return terminalStates.includes(status.toLowerCase());
            },
            sendFinalRequest: function () { return __awaiter(_this, void 0, void 0, function () {
                var initialOperationResult, currentOperationResult, _a, location_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!initialOperation.result._response[LROSYM]) {
                                throw new Error("Expected lroData to determine terminal status");
                            }
                            if (!currentOperation.result._response[LROSYM]) {
                                throw new Error("Expected lroData to determine terminal status");
                            }
                            initialOperationResult = initialOperation.result._response[LROSYM];
                            currentOperationResult = currentOperation.result._response[LROSYM];
                            if (!shouldPerformFinalGet(initialOperationResult, currentOperationResult)) {
                                return [2 /*return*/, currentOperation];
                            }
                            if (!((initialOperationResult === null || initialOperationResult === void 0 ? void 0 : initialOperationResult.requestMethod) === "PUT")) return [3 /*break*/, 2];
                            return [4 /*yield*/, sendFinalGet(initialOperation, sendOperationFn)];
                        case 1:
                            currentOperation = _b.sent();
                            return [2 /*return*/, currentOperation];
                        case 2:
                            if (!(initialOperationResult === null || initialOperationResult === void 0 ? void 0 : initialOperationResult.location)) return [3 /*break*/, 8];
                            _a = finalStateVia;
                            switch (_a) {
                                case "original-uri": return [3 /*break*/, 3];
                                case "azure-async-operation": return [3 /*break*/, 5];
                                case "location": return [3 /*break*/, 6];
                            }
                            return [3 /*break*/, 6];
                        case 3: return [4 /*yield*/, sendFinalGet(initialOperation, sendOperationFn)];
                        case 4:
                            currentOperation = _b.sent();
                            return [2 /*return*/, currentOperation];
                        case 5: return [2 /*return*/, currentOperation];
                        case 6:
                            location_1 = initialOperationResult.location || (currentOperationResult === null || currentOperationResult === void 0 ? void 0 : currentOperationResult.location);
                            if (!location_1) {
                                throw new Error("Couldn't determine final GET URL from location");
                            }
                            return [4 /*yield*/, sendFinalGet(initialOperation, sendOperationFn, location_1)];
                        case 7: return [2 /*return*/, _b.sent()];
                        case 8: 
                        // All other cases return the last operation
                        return [2 /*return*/, currentOperation];
                    }
                });
            }); },
            poll: function () { return __awaiter(_this, void 0, void 0, function () {
                var pollingArgs, _a, requestBody, responses, restSpec, pollingSpec, result;
                var _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (!lastKnownPollingUrl) {
                                throw new Error("Unable to determine polling url");
                            }
                            pollingArgs = currentOperation.args;
                            _a = currentOperation.spec, requestBody = _a.requestBody, responses = _a.responses, restSpec = __rest(_a, ["requestBody", "responses"]);
                            pollingSpec = __assign(__assign({}, restSpec), { responses: getCompositeMappers(responses), httpMethod: "GET", path: lastKnownPollingUrl });
                            return [4 /*yield*/, sendOperationFn(pollingArgs, pollingSpec)];
                        case 1:
                            result = _d.sent();
                            // Update latest polling url
                            lastKnownPollingUrl =
                                ((_b = result._response[LROSYM]) === null || _b === void 0 ? void 0 : _b.azureAsyncOperation) || ((_c = result._response[LROSYM]) === null || _c === void 0 ? void 0 : _c.operationLocation) ||
                                    lastKnownPollingUrl;
                            // Update lastOperation result
                            currentOperation = {
                                args: pollingArgs,
                                spec: pollingSpec,
                                result: result
                            };
                            return [2 /*return*/, currentOperation];
                    }
                });
            }); }
        };
    }
    /**
     * Polling calls will always return a status object i.e. {"status": "success"}
     * these intermediate responses are not described in the swagger so we need to
     * pass custom mappers at runtime.
     * This function replaces all the existing mappers to be able to deserialize a status object
     * @param responses Original set of responses defined in the operation
     */
    function getCompositeMappers(responses) {
        return Object.keys(responses).reduce(function (acc, statusCode) {
            var _a;
            return __assign(__assign({}, acc), (_a = {}, _a[statusCode] = __assign(__assign({}, responses[statusCode]), { bodyMapper: {
                    type: {
                        name: "Composite",
                        modelProperties: {
                            status: {
                                serializedName: "status",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    }
                } }), _a));
        }, {});
    }
    function shouldPerformFinalGet(initialResult, currentResult) {
        var status = (currentResult || {}).status;
        var _a = initialResult || {}, initialRequestMethod = _a.requestMethod, location = _a.location;
        if (status && status.toLowerCase() !== "succeeded") {
            return false;
        }
        if (initialRequestMethod === "DELETE") {
            return false;
        }
        if (initialRequestMethod !== "PUT" && !location) {
            return false;
        }
        return true;
    }
    function sendFinalGet(initialOperation, sendOperationFn, path) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, requestBody, restSpec, finalGetSpec, spec, operationArgs, finalResult;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = initialOperation.spec, requestBody = _a.requestBody, restSpec = __rest(_a, ["requestBody"]);
                        finalGetSpec = __assign(__assign({}, restSpec), { httpMethod: "GET" });
                        spec = __assign(__assign({}, finalGetSpec), (path && { path: path }));
                        operationArgs = initialOperation.args;
                        if (operationArgs.options) {
                            operationArgs.options.shouldDeserialize = true;
                        }
                        return [4 /*yield*/, sendOperationFn(initialOperation.args, spec)];
                    case 1:
                        finalResult = _b.sent();
                        return [2 /*return*/, {
                                args: initialOperation.args,
                                spec: spec,
                                result: finalResult
                            }];
                }
            });
        });
    }

    function createLocationStrategy(initialOperation, sendOperationFn) {
        var _this = this;
        var lroData = initialOperation.result._response[LROSYM];
        if (!lroData) {
            throw new Error("Expected lroData to be defined for Azure-AsyncOperation strategy");
        }
        var currentOperation = initialOperation;
        var lastKnownPollingUrl = lroData.location;
        return {
            isTerminal: function () {
                var currentResult = currentOperation.result._response[LROSYM];
                if (!currentResult) {
                    throw new Error("Expected lroData to determine terminal status");
                }
                if (currentOperation === initialOperation) {
                    return false;
                }
                if (currentResult.statusCode === 202) {
                    return false;
                }
                return true;
            },
            sendFinalRequest: function () { return Promise.resolve(currentOperation); },
            poll: function () { return __awaiter(_this, void 0, void 0, function () {
                var pollingArgs, _a, requestBody, restSpec, pollingSpec, result;
                var _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!lastKnownPollingUrl) {
                                throw new Error("Unable to determine polling url");
                            }
                            pollingArgs = currentOperation.args;
                            _a = currentOperation.spec, requestBody = _a.requestBody, restSpec = __rest(_a, ["requestBody"]);
                            pollingSpec = __assign(__assign({}, restSpec), { httpMethod: "GET", path: lastKnownPollingUrl });
                            return [4 /*yield*/, sendOperationFn(pollingArgs, pollingSpec)];
                        case 1:
                            result = _c.sent();
                            // Update latest polling url
                            lastKnownPollingUrl =
                                ((_b = result._response[LROSYM]) === null || _b === void 0 ? void 0 : _b.location) || lastKnownPollingUrl;
                            // Update lastOperation result
                            currentOperation = {
                                args: pollingArgs,
                                spec: pollingSpec,
                                result: result
                            };
                            return [2 /*return*/, currentOperation];
                    }
                });
            }); }
        };
    }

    /**
     * Creates a polling strategy based on BodyPolling which uses the provisioning state
     * from the result to determine the current operation state
     */
    function createPassthroughStrategy(initialOperation) {
        var _this = this;
        return {
            isTerminal: function () {
                return true;
            },
            sendFinalRequest: function () {
                // BodyPolling doesn't require a final get so return the lastOperation
                return Promise.resolve(initialOperation);
            },
            poll: function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    throw new Error("Passthrough strategy should never poll");
                });
            }); }
        };
    }

    var LROPoller = /** @class */ (function (_super) {
        __extends(LROPoller, _super);
        function LROPoller(_a) {
            var initialOperationArguments = _a.initialOperationArguments, initialOperationResult = _a.initialOperationResult, initialOperationSpec = _a.initialOperationSpec, sendOperation = _a.sendOperation, finalStateVia = _a.finalStateVia, _b = _a.intervalInMs, intervalInMs = _b === void 0 ? 2000 : _b;
            var _this = this;
            var initialOperation = {
                args: initialOperationArguments,
                spec: initialOperationSpec,
                result: initialOperationResult
            };
            var pollingStrategy = getPollingStrategy(initialOperation, sendOperation, finalStateVia);
            var state = {
                // Initial operation will become the last operation
                initialOperation: initialOperation,
                lastOperation: initialOperation,
                pollingStrategy: pollingStrategy,
                finalStateVia: finalStateVia
            };
            var operation = makeOperation(state);
            _this = _super.call(this, operation) || this;
            _this.intervalInMs = intervalInMs;
            return _this;
        }
        /**
         * The method used by the poller to wait before attempting to update its operation.
         */
        LROPoller.prototype.delay = function () {
            return coreHttp.delay(this.intervalInMs);
        };
        return LROPoller;
    }(Poller));
    /**
     * This function determines which strategy to use based on the response from
     * the last operation executed, this last operation can be an initial operation
     * or a polling operation. The 3 possible strategies are described below:
     *
     * A) Azure-AsyncOperation or Operation-Location
     * B) Location
     * C) BodyPolling (provisioningState)
     *  - This strategy is used when:
     *    - Response doesn't contain any of the following headers Location, Azure-AsyncOperation or Operation-Location
     *    - Last operation method is PUT
     */
    function getPollingStrategy(initialOperation, sendOperationFn, finalStateVia) {
        var lroData = initialOperation.result._response[LROSYM];
        if (!lroData) {
            var error = new coreHttp.RestError("Service response doesn't include the required LRO data to continue polling");
            error.statusCode = initialOperation.result._response.status;
            error.response = initialOperation.result._response;
            throw error;
        }
        if (lroData.azureAsyncOperation || lroData.operationLocation) {
            return createAzureAsyncOperationStrategy(initialOperation, sendOperationFn, finalStateVia);
        }
        if (lroData.location) {
            return createLocationStrategy(initialOperation, sendOperationFn);
        }
        if (["PUT", "PATCH"].includes(lroData.requestMethod || "")) {
            return createBodyPollingStrategy(initialOperation, sendOperationFn);
        }
        // Default strategy is just a passthrough returning the initial operation
        return createPassthroughStrategy(initialOperation);
    }

    /// <reference lib="esnext.asynciterable" />
    /** Class representing a IotHubResource. */
    var IotHubResourceImpl = /** @class */ (function () {
        /**
         * Initialize a new instance of the class IotHubResource class.
         * @param client Reference to the service client
         */
        function IotHubResourceImpl(client) {
            this.client = client;
        }
        /**
         * Get all the IoT hubs in a subscription.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listBySubscription = function (options) {
            var _a;
            var _this = this;
            var iter = this.listBySubscriptionPagingAll(options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.listBySubscriptionPagingPage(options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.listBySubscriptionPagingPage = function (options) {
            return __asyncGenerator(this, arguments, function listBySubscriptionPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._listBySubscription(options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._listBySubscriptionNext(continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.listBySubscriptionPagingAll = function (options) {
            return __asyncGenerator(this, arguments, function listBySubscriptionPagingAll_1() {
                var _a, _b, page, e_1_1;
                var e_1, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.listBySubscriptionPagingPage(options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_1_1 = _d.sent();
                            e_1 = { error: e_1_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_1) throw e_1.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get all the IoT hubs in a resource group.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listByResourceGroup = function (resourceGroupName$$1, options) {
            var _a;
            var _this = this;
            var iter = this.listByResourceGroupPagingAll(resourceGroupName$$1, options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.listByResourceGroupPagingPage(resourceGroupName$$1, options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.listByResourceGroupPagingPage = function (resourceGroupName$$1, options) {
            return __asyncGenerator(this, arguments, function listByResourceGroupPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._listByResourceGroup(resourceGroupName$$1, options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._listByResourceGroupNext(resourceGroupName$$1, continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.listByResourceGroupPagingAll = function (resourceGroupName$$1, options) {
            return __asyncGenerator(this, arguments, function listByResourceGroupPagingAll_1() {
                var _a, _b, page, e_2_1;
                var e_2, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName$$1, options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_2_1 = _d.sent();
                            e_2 = { error: e_2_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_2) throw e_2.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get the list of valid SKUs for an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listValidSkus = function (resourceGroupName$$1, resourceName$$1, options) {
            var _a;
            var _this = this;
            var iter = this.getValidSkusPagingAll(resourceGroupName$$1, resourceName$$1, options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.getValidSkusPagingPage(resourceGroupName$$1, resourceName$$1, options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.getValidSkusPagingPage = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function getValidSkusPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._getValidSkus(resourceGroupName$$1, resourceName$$1, options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._getValidSkusNext(resourceGroupName$$1, resourceName$$1, continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.getValidSkusPagingAll = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function getValidSkusPagingAll_1() {
                var _a, _b, page, e_3_1;
                var e_3, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.getValidSkusPagingPage(resourceGroupName$$1, resourceName$$1, options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_3_1 = _d.sent();
                            e_3 = { error: e_3_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_3) throw e_3.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT
         * hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listEventHubConsumerGroups = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options) {
            var _a;
            var _this = this;
            var iter = this.listEventHubConsumerGroupsPagingAll(resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.listEventHubConsumerGroupsPagingPage(resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.listEventHubConsumerGroupsPagingPage = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options) {
            return __asyncGenerator(this, arguments, function listEventHubConsumerGroupsPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._listEventHubConsumerGroups(resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._listEventHubConsumerGroupsNext(resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.listEventHubConsumerGroupsPagingAll = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options) {
            return __asyncGenerator(this, arguments, function listEventHubConsumerGroupsPagingAll_1() {
                var _a, _b, page, e_4_1;
                var e_4, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.listEventHubConsumerGroupsPagingPage(resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_4_1 = _d.sent();
                            e_4 = { error: e_4_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_4) throw e_4.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get a list of all the jobs in an IoT hub. For more information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listJobs = function (resourceGroupName$$1, resourceName$$1, options) {
            var _a;
            var _this = this;
            var iter = this.listJobsPagingAll(resourceGroupName$$1, resourceName$$1, options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.listJobsPagingPage(resourceGroupName$$1, resourceName$$1, options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.listJobsPagingPage = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function listJobsPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._listJobs(resourceGroupName$$1, resourceName$$1, options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._listJobsNext(resourceGroupName$$1, resourceName$$1, continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.listJobsPagingAll = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function listJobsPagingAll_1() {
                var _a, _b, page, e_5_1;
                var e_5, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.listJobsPagingPage(resourceGroupName$$1, resourceName$$1, options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_5_1 = _d.sent();
                            e_5 = { error: e_5_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_5) throw e_5.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get the quota metrics for an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listQuotaMetrics = function (resourceGroupName$$1, resourceName$$1, options) {
            var _a;
            var _this = this;
            var iter = this.getQuotaMetricsPagingAll(resourceGroupName$$1, resourceName$$1, options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.getQuotaMetricsPagingPage(resourceGroupName$$1, resourceName$$1, options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.getQuotaMetricsPagingPage = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function getQuotaMetricsPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._getQuotaMetrics(resourceGroupName$$1, resourceName$$1, options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._getQuotaMetricsNext(resourceGroupName$$1, resourceName$$1, continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.getQuotaMetricsPagingAll = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function getQuotaMetricsPagingAll_1() {
                var _a, _b, page, e_6_1;
                var e_6, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.getQuotaMetricsPagingPage(resourceGroupName$$1, resourceName$$1, options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_6_1 = _d.sent();
                            e_6 = { error: e_6_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_6) throw e_6.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get the health for routing endpoints.
         * @param resourceGroupName
         * @param iotHubName
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listEndpointHealth = function (resourceGroupName$$1, iotHubName$$1, options) {
            var _a;
            var _this = this;
            var iter = this.getEndpointHealthPagingAll(resourceGroupName$$1, iotHubName$$1, options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.getEndpointHealthPagingPage(resourceGroupName$$1, iotHubName$$1, options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.getEndpointHealthPagingPage = function (resourceGroupName$$1, iotHubName$$1, options) {
            return __asyncGenerator(this, arguments, function getEndpointHealthPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._getEndpointHealth(resourceGroupName$$1, iotHubName$$1, options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._getEndpointHealthNext(resourceGroupName$$1, iotHubName$$1, continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.getEndpointHealthPagingAll = function (resourceGroupName$$1, iotHubName$$1, options) {
            return __asyncGenerator(this, arguments, function getEndpointHealthPagingAll_1() {
                var _a, _b, page, e_7_1;
                var e_7, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.getEndpointHealthPagingPage(resourceGroupName$$1, iotHubName$$1, options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_7_1 = _d.sent();
                            e_7 = { error: e_7_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_7) throw e_7.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get the security metadata for an IoT hub. For more information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.listKeys = function (resourceGroupName$$1, resourceName$$1, options) {
            var _a;
            var _this = this;
            var iter = this.listKeysPagingAll(resourceGroupName$$1, resourceName$$1, options);
            return _a = {
                    next: function () {
                        return iter.next();
                    }
                },
                _a[Symbol.asyncIterator] = function () {
                    return this;
                },
                _a.byPage = function () {
                    return _this.listKeysPagingPage(resourceGroupName$$1, resourceName$$1, options);
                },
                _a;
        };
        IotHubResourceImpl.prototype.listKeysPagingPage = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function listKeysPagingPage_1() {
                var result, continuationToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, __await(this._listKeys(resourceGroupName$$1, resourceName$$1, options))];
                        case 1:
                            result = _a.sent();
                            return [4 /*yield*/, __await(result.value || [])];
                        case 2: return [4 /*yield*/, _a.sent()];
                        case 3:
                            _a.sent();
                            continuationToken = result.nextLink;
                            _a.label = 4;
                        case 4:
                            if (!continuationToken) return [3 /*break*/, 8];
                            return [4 /*yield*/, __await(this._listKeysNext(resourceGroupName$$1, resourceName$$1, continuationToken, options))];
                        case 5:
                            result = _a.sent();
                            continuationToken = result.nextLink;
                            return [4 /*yield*/, __await(result.value || [])];
                        case 6: return [4 /*yield*/, _a.sent()];
                        case 7:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        IotHubResourceImpl.prototype.listKeysPagingAll = function (resourceGroupName$$1, resourceName$$1, options) {
            return __asyncGenerator(this, arguments, function listKeysPagingAll_1() {
                var _a, _b, page, e_8_1;
                var e_8, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 7, 8, 13]);
                            _a = __asyncValues(this.listKeysPagingPage(resourceGroupName$$1, resourceName$$1, options));
                            _d.label = 1;
                        case 1: return [4 /*yield*/, __await(_a.next())];
                        case 2:
                            if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                            page = _b.value;
                            return [5 /*yield**/, __values(__asyncDelegator(__asyncValues(page)))];
                        case 3: return [4 /*yield*/, __await.apply(void 0, [_d.sent()])];
                        case 4:
                            _d.sent();
                            _d.label = 5;
                        case 5: return [3 /*break*/, 1];
                        case 6: return [3 /*break*/, 13];
                        case 7:
                            e_8_1 = _d.sent();
                            e_8 = { error: e_8_1 };
                            return [3 /*break*/, 13];
                        case 8:
                            _d.trys.push([8, , 11, 12]);
                            if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                            return [4 /*yield*/, __await(_c.call(_a))];
                        case 9:
                            _d.sent();
                            _d.label = 10;
                        case 10: return [3 /*break*/, 12];
                        case 11:
                            if (e_8) throw e_8.error;
                            return [7 /*endfinally*/];
                        case 12: return [7 /*endfinally*/];
                        case 13: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get the non-security related metadata of an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.get = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getOperationSpec);
        };
        /**
         * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve
         * the IoT hub metadata and security metadata, and then combine them with the modified values in a new
         * body to update the IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param iotHubDescription The IoT hub metadata and security metadata.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, iotHubDescription$$1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var operationArguments, sendOperation, initialOperationResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationArguments = {
                                resourceGroupName: resourceGroupName$$1,
                                resourceName: resourceName$$1,
                                iotHubDescription: iotHubDescription$$1,
                                options: this.getOperationOptions(options, "undefined")
                            };
                            sendOperation = function (args, spec) {
                                return _this.client.sendOperationRequest(args, spec);
                            };
                            return [4 /*yield*/, sendOperation(operationArguments, createOrUpdateOperationSpec)];
                        case 1:
                            initialOperationResult = _a.sent();
                            return [2 /*return*/, new LROPoller({
                                    initialOperationArguments: operationArguments,
                                    initialOperationSpec: createOrUpdateOperationSpec,
                                    initialOperationResult: initialOperationResult,
                                    sendOperation: sendOperation
                                })];
                    }
                });
            });
        };
        /**
         * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
         * @param resourceGroupName Resource group identifier.
         * @param resourceName Name of iot hub to update.
         * @param iotHubTags Updated tag information to set into the iot hub instance.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.update = function (resourceGroupName$$1, resourceName$$1, iotHubTags$$1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var operationArguments, sendOperation, initialOperationResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationArguments = {
                                resourceGroupName: resourceGroupName$$1,
                                resourceName: resourceName$$1,
                                iotHubTags: iotHubTags$$1,
                                options: this.getOperationOptions(options, "undefined")
                            };
                            sendOperation = function (args, spec) {
                                return _this.client.sendOperationRequest(args, spec);
                            };
                            return [4 /*yield*/, sendOperation(operationArguments, updateOperationSpec)];
                        case 1:
                            initialOperationResult = _a.sent();
                            return [2 /*return*/, new LROPoller({
                                    initialOperationArguments: operationArguments,
                                    initialOperationSpec: updateOperationSpec,
                                    initialOperationResult: initialOperationResult,
                                    sendOperation: sendOperation
                                })];
                    }
                });
            });
        };
        /**
         * Delete an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.delete = function (resourceGroupName$$1, resourceName$$1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var operationArguments, sendOperation, initialOperationResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationArguments = {
                                resourceGroupName: resourceGroupName$$1,
                                resourceName: resourceName$$1,
                                options: this.getOperationOptions(options, "undefined")
                            };
                            sendOperation = function (args, spec) {
                                return _this.client.sendOperationRequest(args, spec);
                            };
                            return [4 /*yield*/, sendOperation(operationArguments, deleteOperationSpec)];
                        case 1:
                            initialOperationResult = _a.sent();
                            return [2 /*return*/, new LROPoller({
                                    initialOperationArguments: operationArguments,
                                    initialOperationSpec: deleteOperationSpec,
                                    initialOperationResult: initialOperationResult,
                                    sendOperation: sendOperation
                                })];
                    }
                });
            });
        };
        /**
         * Get all the IoT hubs in a subscription.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listBySubscription = function (options) {
            var operationArguments = {
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listBySubscriptionOperationSpec);
        };
        /**
         * Get all the IoT hubs in a resource group.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listByResourceGroup = function (resourceGroupName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listByResourceGroupOperationSpec);
        };
        /**
         * Get the statistics from an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.getStats = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getStatsOperationSpec);
        };
        /**
         * Get the list of valid SKUs for an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._getValidSkus = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getValidSkusOperationSpec);
        };
        /**
         * Get a list of the consumer groups in the Event Hub-compatible device-to-cloud endpoint in an IoT
         * hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listEventHubConsumerGroups = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listEventHubConsumerGroupsOperationSpec);
        };
        /**
         * Get a consumer group from the Event Hub-compatible device-to-cloud endpoint for an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
         * @param name The name of the consumer group to retrieve.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.getEventHubConsumerGroup = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, name$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                name: name$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getEventHubConsumerGroupOperationSpec);
        };
        /**
         * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
         * @param name The name of the consumer group to add.
         * @param consumerGroupBody The consumer group to add.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.createEventHubConsumerGroup = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, name$$1, consumerGroupBody$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                name: name$$1,
                consumerGroupBody: consumerGroupBody$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, createEventHubConsumerGroupOperationSpec);
        };
        /**
         * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
         * @param name The name of the consumer group to delete.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.deleteEventHubConsumerGroup = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, name$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                name: name$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, deleteEventHubConsumerGroupOperationSpec);
        };
        /**
         * Get a list of all the jobs in an IoT hub. For more information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listJobs = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listJobsOperationSpec);
        };
        /**
         * Get the details of a job from an IoT hub. For more information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param jobId The job identifier.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.getJob = function (resourceGroupName$$1, resourceName$$1, jobId$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                jobId: jobId$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getJobOperationSpec);
        };
        /**
         * Get the quota metrics for an IoT hub.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._getQuotaMetrics = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getQuotaMetricsOperationSpec);
        };
        /**
         * Get the health for routing endpoints.
         * @param resourceGroupName
         * @param iotHubName
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._getEndpointHealth = function (resourceGroupName$$1, iotHubName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                iotHubName: iotHubName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getEndpointHealthOperationSpec);
        };
        /**
         * Check if an IoT hub name is available.
         * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the
         *                        IoT hub to check.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.checkNameAvailability = function (operationInputs$$1, options) {
            var operationArguments = {
                operationInputs: operationInputs$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, checkNameAvailabilityOperationSpec);
        };
        /**
         * Test all routes configured in this Iot Hub
         * @param iotHubName IotHub to be tested
         * @param resourceGroupName resource group which Iot Hub belongs to
         * @param input Input for testing all routes
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.testAllRoutes = function (iotHubName$$1, resourceGroupName$$1, input$$1, options) {
            var operationArguments = {
                iotHubName: iotHubName$$1,
                resourceGroupName: resourceGroupName$$1,
                input: input$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, testAllRoutesOperationSpec);
        };
        /**
         * Test the new route for this Iot Hub
         * @param iotHubName IotHub to be tested
         * @param resourceGroupName resource group which Iot Hub belongs to
         * @param input Route that needs to be tested
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.testRoute = function (iotHubName$$1, resourceGroupName$$1, input$$1, options) {
            var operationArguments = {
                iotHubName: iotHubName$$1,
                resourceGroupName: resourceGroupName$$1,
                input: input$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, testRouteOperationSpec);
        };
        /**
         * Get the security metadata for an IoT hub. For more information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listKeys = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listKeysOperationSpec);
        };
        /**
         * Get a shared access policy by name from an IoT hub. For more information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param keyName The name of the shared access policy.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.getKeysForKeyName = function (resourceGroupName$$1, resourceName$$1, keyName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                keyName: keyName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getKeysForKeyNameOperationSpec);
        };
        /**
         * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob
         * container. For more information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param exportDevicesParameters The parameters that specify the export devices operation.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.exportDevices = function (resourceGroupName$$1, resourceName$$1, exportDevicesParameters$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                exportDevicesParameters: exportDevicesParameters$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, exportDevicesOperationSpec);
        };
        /**
         * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more
         * information, see:
         * https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param importDevicesParameters The parameters that specify the import devices operation.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype.importDevices = function (resourceGroupName$$1, resourceName$$1, importDevicesParameters$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                importDevicesParameters: importDevicesParameters$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, importDevicesOperationSpec);
        };
        /**
         * ListBySubscriptionNext
         * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listBySubscriptionNext = function (nextLink$$1, options) {
            var operationArguments = {
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listBySubscriptionNextOperationSpec);
        };
        /**
         * ListByResourceGroupNext
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listByResourceGroupNext = function (resourceGroupName$$1, nextLink$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listByResourceGroupNextOperationSpec);
        };
        /**
         * GetValidSkusNext
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param nextLink The nextLink from the previous successful call to the GetValidSkus method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._getValidSkusNext = function (resourceGroupName$$1, resourceName$$1, nextLink$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getValidSkusNextOperationSpec);
        };
        /**
         * ListEventHubConsumerGroupsNext
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param eventHubEndpointName The name of the Event Hub-compatible endpoint.
         * @param nextLink The nextLink from the previous successful call to the ListEventHubConsumerGroups
         *                 method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listEventHubConsumerGroupsNext = function (resourceGroupName$$1, resourceName$$1, eventHubEndpointName$$1, nextLink$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                eventHubEndpointName: eventHubEndpointName$$1,
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listEventHubConsumerGroupsNextOperationSpec);
        };
        /**
         * ListJobsNext
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param nextLink The nextLink from the previous successful call to the ListJobs method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listJobsNext = function (resourceGroupName$$1, resourceName$$1, nextLink$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listJobsNextOperationSpec);
        };
        /**
         * GetQuotaMetricsNext
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param nextLink The nextLink from the previous successful call to the GetQuotaMetrics method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._getQuotaMetricsNext = function (resourceGroupName$$1, resourceName$$1, nextLink$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getQuotaMetricsNextOperationSpec);
        };
        /**
         * GetEndpointHealthNext
         * @param resourceGroupName
         * @param iotHubName
         * @param nextLink The nextLink from the previous successful call to the GetEndpointHealth method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._getEndpointHealthNext = function (resourceGroupName$$1, iotHubName$$1, nextLink$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                iotHubName: iotHubName$$1,
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getEndpointHealthNextOperationSpec);
        };
        /**
         * ListKeysNext
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param nextLink The nextLink from the previous successful call to the ListKeys method.
         * @param options The options parameters.
         */
        IotHubResourceImpl.prototype._listKeysNext = function (resourceGroupName$$1, resourceName$$1, nextLink$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                nextLink: nextLink$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listKeysNextOperationSpec);
        };
        IotHubResourceImpl.prototype.getOperationOptions = function (options, finalStateVia) {
            var operationOptions = options || {};
            operationOptions.requestOptions = __assign(__assign({}, operationOptions.requestOptions), { shouldDeserialize: shouldDeserializeLRO(finalStateVia) });
            return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
        };
        return IotHubResourceImpl;
    }());
    // Operation Specifications
    var serializer$1 = new coreHttp.Serializer(Mappers, /* isXml */ false);
    var getOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var createOrUpdateOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        httpMethod: "PUT",
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            201: {
                bodyMapper: IotHubDescription
            },
            202: {
                bodyMapper: IotHubDescription
            },
            204: {
                bodyMapper: IotHubDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: iotHubDescription,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [
            accept,
            contentType,
            ifMatch
        ],
        mediaType: "json",
        serializer: serializer$1
    };
    var updateOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        httpMethod: "PATCH",
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            201: {
                bodyMapper: IotHubDescription
            },
            202: {
                bodyMapper: IotHubDescription
            },
            204: {
                bodyMapper: IotHubDescription
            }
        },
        requestBody: iotHubTags,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$1
    };
    var deleteOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}",
        httpMethod: "DELETE",
        responses: {
            200: {
                bodyMapper: IotHubDescription
            },
            201: {
                bodyMapper: IotHubDescription
            },
            202: {
                bodyMapper: IotHubDescription
            },
            204: {
                bodyMapper: IotHubDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listBySubscriptionOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/IotHubs",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getStatsOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubStats",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: RegistryStatistics
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getValidSkusOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/skus",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubSkuDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listEventHubConsumerGroupsOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupsListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getEventHubConsumerGroupOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            name
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var createEventHubConsumerGroupOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
        httpMethod: "PUT",
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: consumerGroupBody,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            name
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$1
    };
    var deleteEventHubConsumerGroupOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}",
        httpMethod: "DELETE",
        responses: {
            200: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName,
            name
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listJobsOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: JobResponseListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getJobOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/jobs/{jobId}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: JobResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            jobId
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getQuotaMetricsOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/quotaMetrics",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubQuotaMetricInfoListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getEndpointHealthOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routingEndpointsHealth",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: EndpointHealthDataListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            iotHubName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var checkNameAvailabilityOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: IotHubNameAvailabilityInfo
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: operationInputs,
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$1
    };
    var testAllRoutesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: TestAllRoutesResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: input,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            iotHubName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$1
    };
    var testRouteOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: TestRouteResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: input1,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            iotHubName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$1
    };
    var listKeysOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getKeysForKeyNameOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRule
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            keyName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var exportDevicesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: JobResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: exportDevicesParameters,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$1
    };
    var importDevicesOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: JobResponse
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: importDevicesParameters,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$1
    };
    var listBySubscriptionNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId,
            resourceGroupName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getValidSkusNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubSkuDescriptionListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listEventHubConsumerGroupsNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: EventHubConsumerGroupsListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId,
            resourceGroupName,
            resourceName,
            eventHubEndpointName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listJobsNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: JobResponseListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getQuotaMetricsNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: IotHubQuotaMetricInfoListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var getEndpointHealthNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: EndpointHealthDataListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId,
            resourceGroupName,
            iotHubName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };
    var listKeysNextOperationSpec = {
        path: "{nextLink}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: SharedAccessSignatureAuthorizationRuleListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            nextLink,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$1
    };

    /** Class representing a ResourceProviderCommon. */
    var ResourceProviderCommonImpl = /** @class */ (function () {
        /**
         * Initialize a new instance of the class ResourceProviderCommon class.
         * @param client Reference to the service client
         */
        function ResourceProviderCommonImpl(client) {
            this.client = client;
        }
        /**
         * Get the number of free and paid iot hubs in the subscription
         * @param options The options parameters.
         */
        ResourceProviderCommonImpl.prototype.getSubscriptionQuota = function (options) {
            var operationArguments = {
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getSubscriptionQuotaOperationSpec);
        };
        return ResourceProviderCommonImpl;
    }());
    // Operation Specifications
    var serializer$2 = new coreHttp.Serializer(Mappers, /* isXml */ false);
    var getSubscriptionQuotaOperationSpec = {
        path: "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/usages",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: UserSubscriptionQuotaListResult
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [$host, subscriptionId],
        headerParameters: [accept],
        serializer: serializer$2
    };

    /** Class representing a Certificates. */
    var CertificatesImpl = /** @class */ (function () {
        /**
         * Initialize a new instance of the class Certificates class.
         * @param client Reference to the service client
         */
        function CertificatesImpl(client) {
            this.client = client;
        }
        /**
         * Returns the list of certificates.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        CertificatesImpl.prototype.listByIotHub = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listByIotHubOperationSpec);
        };
        /**
         * Returns the certificate.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param certificateName The name of the certificate
         * @param options The options parameters.
         */
        CertificatesImpl.prototype.get = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getOperationSpec$1);
        };
        /**
         * Adds new or replaces existing certificate.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param certificateName The name of the certificate
         * @param certificateDescription The certificate body.
         * @param options The options parameters.
         */
        CertificatesImpl.prototype.createOrUpdate = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, certificateDescription$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                certificateDescription: certificateDescription$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, createOrUpdateOperationSpec$1);
        };
        /**
         * Deletes an existing X509 certificate or does nothing if it does not exist.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param certificateName The name of the certificate
         * @param ifMatch ETag of the Certificate.
         * @param options The options parameters.
         */
        CertificatesImpl.prototype.delete = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, ifMatch$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                ifMatch: ifMatch$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, deleteOperationSpec$1);
        };
        /**
         * Generates verification code for proof of possession flow. The verification code will be used to
         * generate a leaf certificate.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param certificateName The name of the certificate
         * @param ifMatch ETag of the Certificate.
         * @param options The options parameters.
         */
        CertificatesImpl.prototype.generateVerificationCode = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, ifMatch$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                ifMatch: ifMatch$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, generateVerificationCodeOperationSpec);
        };
        /**
         * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying
         * pre uploaded certificate.
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param certificateName The name of the certificate
         * @param ifMatch ETag of the Certificate.
         * @param certificateVerificationBody The name of the certificate
         * @param options The options parameters.
         */
        CertificatesImpl.prototype.verify = function (resourceGroupName$$1, resourceName$$1, certificateName$$1, ifMatch$$1, certificateVerificationBody$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                certificateName: certificateName$$1,
                ifMatch: ifMatch$$1,
                certificateVerificationBody: certificateVerificationBody$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, verifyOperationSpec);
        };
        return CertificatesImpl;
    }());
    // Operation Specifications
    var serializer$3 = new coreHttp.Serializer(Mappers, /* isXml */ false);
    var listByIotHubOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: CertificateListDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$3
    };
    var getOperationSpec$1 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: CertificateDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        headerParameters: [accept],
        serializer: serializer$3
    };
    var createOrUpdateOperationSpec$1 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
        httpMethod: "PUT",
        responses: {
            200: {
                bodyMapper: CertificateDescription
            },
            201: {
                bodyMapper: CertificateDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: certificateDescription,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        headerParameters: [
            accept,
            contentType,
            ifMatch
        ],
        mediaType: "json",
        serializer: serializer$3
    };
    var deleteOperationSpec$1 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}",
        httpMethod: "DELETE",
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        headerParameters: [accept, ifMatch1],
        serializer: serializer$3
    };
    var generateVerificationCodeOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: CertificateWithNonceDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        headerParameters: [accept, ifMatch1],
        serializer: serializer$3
    };
    var verifyOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify",
        httpMethod: "POST",
        responses: {
            200: {
                bodyMapper: CertificateDescription
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: certificateVerificationBody,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            certificateName
        ],
        headerParameters: [
            accept,
            contentType,
            ifMatch1
        ],
        mediaType: "json",
        serializer: serializer$3
    };

    /** Class representing a IotHub. */
    var IotHubImpl = /** @class */ (function () {
        /**
         * Initialize a new instance of the class IotHub class.
         * @param client Reference to the service client
         */
        function IotHubImpl(client) {
            this.client = client;
        }
        /**
         * Manually initiate a failover for the IoT Hub to its secondary region. To learn more, see
         * https://aka.ms/manualfailover
         * @param iotHubName Name of the IoT hub to failover
         * @param resourceGroupName Name of the resource group containing the IoT hub resource
         * @param failoverInput Region to failover to. Must be the Azure paired region. Get the value from the
         *                      secondary location in the locations property. To learn more, see
         *                      https://aka.ms/manualfailover/region
         * @param options The options parameters.
         */
        IotHubImpl.prototype.manualFailover = function (iotHubName$$1, resourceGroupName$$1, failoverInput$$1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var operationArguments, sendOperation, initialOperationResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationArguments = {
                                iotHubName: iotHubName$$1,
                                resourceGroupName: resourceGroupName$$1,
                                failoverInput: failoverInput$$1,
                                options: this.getOperationOptions(options, "undefined")
                            };
                            sendOperation = function (args, spec) {
                                return _this.client.sendOperationRequest(args, spec);
                            };
                            return [4 /*yield*/, sendOperation(operationArguments, manualFailoverOperationSpec)];
                        case 1:
                            initialOperationResult = _a.sent();
                            return [2 /*return*/, new LROPoller({
                                    initialOperationArguments: operationArguments,
                                    initialOperationSpec: manualFailoverOperationSpec,
                                    initialOperationResult: initialOperationResult,
                                    sendOperation: sendOperation
                                })];
                    }
                });
            });
        };
        IotHubImpl.prototype.getOperationOptions = function (options, finalStateVia) {
            var operationOptions = options || {};
            operationOptions.requestOptions = __assign(__assign({}, operationOptions.requestOptions), { shouldDeserialize: shouldDeserializeLRO(finalStateVia) });
            return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
        };
        return IotHubImpl;
    }());
    // Operation Specifications
    var serializer$4 = new coreHttp.Serializer(Mappers, /* isXml */ false);
    var manualFailoverOperationSpec = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/failover",
        httpMethod: "POST",
        responses: {
            200: {},
            201: {},
            202: {},
            204: {},
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: failoverInput,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            iotHubName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$4
    };

    /** Class representing a PrivateLinkResources. */
    var PrivateLinkResourcesImpl = /** @class */ (function () {
        /**
         * Initialize a new instance of the class PrivateLinkResources class.
         * @param client Reference to the service client
         */
        function PrivateLinkResourcesImpl(client) {
            this.client = client;
        }
        /**
         * List private link resources for the given IotHub
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        PrivateLinkResourcesImpl.prototype.list = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listOperationSpec$1);
        };
        /**
         * Get the specified private link resource for the given IotHub
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param groupId The name of the private link resource
         * @param options The options parameters.
         */
        PrivateLinkResourcesImpl.prototype.get = function (resourceGroupName$$1, resourceName$$1, groupId$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                groupId: groupId$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getOperationSpec$2);
        };
        return PrivateLinkResourcesImpl;
    }());
    // Operation Specifications
    var serializer$5 = new coreHttp.Serializer(Mappers, /* isXml */ false);
    var listOperationSpec$1 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateLinkResources",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: PrivateLinkResources
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$5
    };
    var getOperationSpec$2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateLinkResources/{groupId}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: GroupIdInformation
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            groupId
        ],
        headerParameters: [accept],
        serializer: serializer$5
    };

    /** Class representing a PrivateEndpointConnections. */
    var PrivateEndpointConnectionsImpl = /** @class */ (function () {
        /**
         * Initialize a new instance of the class PrivateEndpointConnections class.
         * @param client Reference to the service client
         */
        function PrivateEndpointConnectionsImpl(client) {
            this.client = client;
        }
        /**
         * List private endpoint connection properties
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param options The options parameters.
         */
        PrivateEndpointConnectionsImpl.prototype.list = function (resourceGroupName$$1, resourceName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, listOperationSpec$2);
        };
        /**
         * Get private endpoint connection properties
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param privateEndpointConnectionName The name of the private endpoint connection
         * @param options The options parameters.
         */
        PrivateEndpointConnectionsImpl.prototype.get = function (resourceGroupName$$1, resourceName$$1, privateEndpointConnectionName$$1, options) {
            var operationArguments = {
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                privateEndpointConnectionName: privateEndpointConnectionName$$1,
                options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
            };
            return this.client.sendOperationRequest(operationArguments, getOperationSpec$3);
        };
        /**
         * Update the status of a private endpoint connection with the specified name
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param privateEndpointConnectionName The name of the private endpoint connection
         * @param privateEndpointConnection The private endpoint connection with updated properties
         * @param options The options parameters.
         */
        PrivateEndpointConnectionsImpl.prototype.update = function (resourceGroupName$$1, resourceName$$1, privateEndpointConnectionName$$1, privateEndpointConnection$$1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var operationArguments, sendOperation, initialOperationResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationArguments = {
                                resourceGroupName: resourceGroupName$$1,
                                resourceName: resourceName$$1,
                                privateEndpointConnectionName: privateEndpointConnectionName$$1,
                                privateEndpointConnection: privateEndpointConnection$$1,
                                options: this.getOperationOptions(options, "undefined")
                            };
                            sendOperation = function (args, spec) {
                                return _this.client.sendOperationRequest(args, spec);
                            };
                            return [4 /*yield*/, sendOperation(operationArguments, updateOperationSpec$1)];
                        case 1:
                            initialOperationResult = _a.sent();
                            return [2 /*return*/, new LROPoller({
                                    initialOperationArguments: operationArguments,
                                    initialOperationSpec: updateOperationSpec$1,
                                    initialOperationResult: initialOperationResult,
                                    sendOperation: sendOperation
                                })];
                    }
                });
            });
        };
        /**
         * Delete private endpoint connection with the specified name
         * @param resourceGroupName The name of the resource group that contains the IoT hub.
         * @param resourceName The name of the IoT hub.
         * @param privateEndpointConnectionName The name of the private endpoint connection
         * @param options The options parameters.
         */
        PrivateEndpointConnectionsImpl.prototype.delete = function (resourceGroupName$$1, resourceName$$1, privateEndpointConnectionName$$1, options) {
            return __awaiter(this, void 0, void 0, function () {
                var operationArguments, sendOperation, initialOperationResult;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            operationArguments = {
                                resourceGroupName: resourceGroupName$$1,
                                resourceName: resourceName$$1,
                                privateEndpointConnectionName: privateEndpointConnectionName$$1,
                                options: this.getOperationOptions(options, "undefined")
                            };
                            sendOperation = function (args, spec) {
                                return _this.client.sendOperationRequest(args, spec);
                            };
                            return [4 /*yield*/, sendOperation(operationArguments, deleteOperationSpec$2)];
                        case 1:
                            initialOperationResult = _a.sent();
                            return [2 /*return*/, new LROPoller({
                                    initialOperationArguments: operationArguments,
                                    initialOperationSpec: deleteOperationSpec$2,
                                    initialOperationResult: initialOperationResult,
                                    sendOperation: sendOperation
                                })];
                    }
                });
            });
        };
        PrivateEndpointConnectionsImpl.prototype.getOperationOptions = function (options, finalStateVia) {
            var operationOptions = options || {};
            operationOptions.requestOptions = __assign(__assign({}, operationOptions.requestOptions), { shouldDeserialize: shouldDeserializeLRO(finalStateVia) });
            return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
        };
        return PrivateEndpointConnectionsImpl;
    }());
    // Operation Specifications
    var serializer$6 = new coreHttp.Serializer(Mappers, /* isXml */ false);
    var listOperationSpec$2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: {
                    type: {
                        name: "Sequence",
                        element: {
                            type: { name: "Composite", className: "PrivateEndpointConnection" }
                        }
                    }
                }
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName
        ],
        headerParameters: [accept],
        serializer: serializer$6
    };
    var getOperationSpec$3 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "GET",
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName
        ],
        headerParameters: [accept],
        serializer: serializer$6
    };
    var updateOperationSpec$1 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "PUT",
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            201: {
                bodyMapper: PrivateEndpointConnection
            },
            202: {
                bodyMapper: PrivateEndpointConnection
            },
            204: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        requestBody: privateEndpointConnection,
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName
        ],
        headerParameters: [accept, contentType],
        mediaType: "json",
        serializer: serializer$6
    };
    var deleteOperationSpec$2 = {
        path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/iotHubs/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
        httpMethod: "DELETE",
        responses: {
            200: {
                bodyMapper: PrivateEndpointConnection
            },
            201: {
                bodyMapper: PrivateEndpointConnection
            },
            202: {
                bodyMapper: PrivateEndpointConnection
            },
            204: {
                bodyMapper: PrivateEndpointConnection
            },
            default: {
                bodyMapper: ErrorDetails
            }
        },
        queryParameters: [apiVersion],
        urlParameters: [
            $host,
            subscriptionId,
            resourceGroupName,
            resourceName,
            privateEndpointConnectionName
        ],
        headerParameters: [accept],
        serializer: serializer$6
    };

    var packageName = "@azure/arm-iothub";
    var packageVersion = "1.0.0";
    var IotHubClientContext = /** @class */ (function (_super) {
        __extends(IotHubClientContext, _super);
        /**
         * Initializes a new instance of the IotHubClientContext class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param subscriptionId The subscription identifier.
         * @param options The parameter options
         */
        function IotHubClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials === undefined) {
                throw new Error("'credentials' cannot be null");
            }
            if (subscriptionId === undefined) {
                throw new Error("'subscriptionId' cannot be null");
            }
            // Initializing default values for options
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = coreHttp.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            // Building the request policy fatories based on the passed factories and the
            // any required factories needed by the client.
            if (Array.isArray(options.requestPolicyFactories)) {
                // When an array of factories is passed in, we'll just add the required factories,
                // in this case lroPolicy(). It is important to note that passing an array of factories
                // to a new client, bypasses core-http default factories. Just the pipelines provided will be run.
                options.requestPolicyFactories = __spreadArrays([
                    lroPolicy()
                ], options.requestPolicyFactories);
            }
            else if (options.requestPolicyFactories) {
                // When we were passed a requestPolicyFactories as a function, we'll create a new one that adds the factories provided
                // in the options plus the required policies. When using this path, the pipelines passed to the client will be added to the
                // default policies added by core-http
                var optionsPolicies_1 = options.requestPolicyFactories([lroPolicy()]) || [
                    lroPolicy()
                ];
                options.requestPolicyFactories = function (defaultFactories) { return __spreadArrays(optionsPolicies_1, defaultFactories); };
            }
            else {
                // In case no request policy factories were provided, we'll just need to create a function that will add
                // the lroPolicy to the default pipelines added by core-http
                options.requestPolicyFactories = function (defaultFactories) { return __spreadArrays([
                    lroPolicy()
                ], defaultFactories); };
            }
            _this = _super.call(this, credentials, options) || this;
            _this.requestContentType = "application/json; charset=utf-8";
            _this.baseUri = options.endpoint || "https://management.azure.com";
            // Parameter assignments
            _this.subscriptionId = subscriptionId;
            // Assigning values to Constant parameters
            _this.$host = options.$host || "https://management.azure.com";
            _this.apiVersion = options.apiVersion || "2021-03-03-preview";
            return _this;
        }
        return IotHubClientContext;
    }(coreHttp.ServiceClient));

    var IotHubClient = /** @class */ (function (_super) {
        __extends(IotHubClient, _super);
        /**
         * Initializes a new instance of the IotHubClient class.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param subscriptionId The subscription identifier.
         * @param options The parameter options
         */
        function IotHubClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.operations = new OperationsImpl(_this);
            _this.iotHubResource = new IotHubResourceImpl(_this);
            _this.resourceProviderCommon = new ResourceProviderCommonImpl(_this);
            _this.certificates = new CertificatesImpl(_this);
            _this.iotHub = new IotHubImpl(_this);
            _this.privateLinkResources = new PrivateLinkResourcesImpl(_this);
            _this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(_this);
            return _this;
        }
        return IotHubClient;
    }(IotHubClientContext));

    exports.IotHubClient = IotHubClient;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-iothub.js.map
